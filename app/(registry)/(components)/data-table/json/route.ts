export const GET = () =>
	Response.json({
		name: 'data-table',
		type: 'registry:block',
		dependencies: [
			'@radix-ui/react-checkbox',
			'@radix-ui/react-dialog',
			'@radix-ui/react-dropdown-menu',
			'@radix-ui/react-popover',
			'@radix-ui/react-select',
			'@radix-ui/react-separator',
			'@radix-ui/react-slot',
			'@tanstack/react-table',
			'cmdk',
		],
		devDependencies: [],
		registryDependencies: [
			'badge',
			'button',
			'card',
			'checkbox',
			'command',
			'dialog',
			'dropdown-menu',
			'input',
			'popover',
			'select',
			'separator',
			'table',
		],
		files: [
			{
				path: './components/data-table/column-header.tsx',
				content:
					"import { Button } from '@/components/ui/button'\nimport {\n\tDropdownMenu,\n\tDropdownMenuContent,\n\tDropdownMenuItem,\n\tDropdownMenuSeparator,\n\tDropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport { cn } from '@/lib/utils'\nimport { HeaderContext } from '@tanstack/react-table'\nimport { ArrowDown, ArrowUp, ChevronsUpDown, EyeOff } from 'lucide-react'\n\nexport const ColumnHeader = <TData, TValue>(title: string, className = '') => {\n\tconst HeaderComponent = ({ column }: HeaderContext<TData, TValue>) => {\n\t\tif (!column.getCanSort()) return <div className={cn(className)}>{title}</div>\n\n\t\treturn (\n\t\t\t<div className={cn('flex items-center space-x-2', className)}>\n\t\t\t\t<DropdownMenu>\n\t\t\t\t\t<DropdownMenuTrigger asChild>\n\t\t\t\t\t\t<Button variant='ghost' size='sm' className='-ml-3 h-8 data-[state=open]:bg-accent'>\n\t\t\t\t\t\t\t<span>{title}</span>\n\t\t\t\t\t\t\t{column.getIsSorted() === 'desc' ? (\n\t\t\t\t\t\t\t\t<ArrowDown />\n\t\t\t\t\t\t\t) : column.getIsSorted() === 'asc' ? (\n\t\t\t\t\t\t\t\t<ArrowUp />\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<ChevronsUpDown />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</DropdownMenuTrigger>\n\t\t\t\t\t<DropdownMenuContent align='start'>\n\t\t\t\t\t\t<DropdownMenuItem onClick={() => column.toggleSorting(false)}>\n\t\t\t\t\t\t\t<ArrowUp className='h-3.5 w-3.5 text-muted-foreground/70' />\n\t\t\t\t\t\t\tAsc\n\t\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t\t<DropdownMenuItem onClick={() => column.toggleSorting(true)}>\n\t\t\t\t\t\t\t<ArrowDown className='h-3.5 w-3.5 text-muted-foreground/70' />\n\t\t\t\t\t\t\tDesc\n\t\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t\t<DropdownMenuSeparator />\n\t\t\t\t\t\t<DropdownMenuItem onClick={() => column.toggleVisibility(false)}>\n\t\t\t\t\t\t\t<EyeOff className='h-3.5 w-3.5 text-muted-foreground/70' />\n\t\t\t\t\t\t\tHide\n\t\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t</DropdownMenuContent>\n\t\t\t\t</DropdownMenu>\n\t\t\t</div>\n\t\t)\n\t}\n\tHeaderComponent.displayName = 'DataTableColumnHeader'\n\treturn HeaderComponent\n}\n",
				type: 'registry:block',
			},
			{
				path: './components/data-table/data-table.tsx',
				content:
					"'use client'\n\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'\nimport {\n\tColumnDef,\n\tColumnFiltersState,\n\tSortingState,\n\tTableState,\n\tVisibilityState,\n\tflexRender,\n\tgetCoreRowModel,\n\tgetFacetedRowModel,\n\tgetFacetedUniqueValues,\n\tgetFilteredRowModel,\n\tgetPaginationRowModel,\n\tgetSortedRowModel,\n\tuseReactTable,\n} from '@tanstack/react-table'\nimport { useState } from 'react'\nimport { FacetedFilterProps } from './faceted-filter'\nimport { Pagination } from './pagination'\nimport { Toolbar } from './toolbar'\n\ntype DataTableProps<TData, TValue> = {\n\tcolumns: ColumnDef<TData, TValue>[]\n\tdata: TData[]\n\tdefaultState?: Partial<TableState>\n\tfilters?: Omit<FacetedFilterProps<TData>, 'table'>[]\n\tpagination?: boolean\n\tsearchColumn?: string\n}\n\nexport function DataTable<TData, TValue>({\n\tcolumns,\n\tdata,\n\tdefaultState,\n\tfilters,\n\tpagination,\n\tsearchColumn,\n}: DataTableProps<TData, TValue>) {\n\tconst [columnFilters, setColumnFilters] = useState<ColumnFiltersState>(defaultState?.columnFilters ?? [])\n\tconst [columnVisibility, setColumnVisibility] = useState<VisibilityState>(defaultState?.columnVisibility ?? {})\n\tconst [rowSelection, setRowSelection] = useState(defaultState?.rowSelection ?? {})\n\tconst [sorting, setSorting] = useState<SortingState>(defaultState?.sorting ?? [])\n\n\tconst table = useReactTable({\n\t\tdata,\n\t\tcolumns,\n\t\tstate: {\n\t\t\tsorting,\n\t\t\tcolumnVisibility,\n\t\t\trowSelection,\n\t\t\tcolumnFilters,\n\t\t},\n\t\tenableRowSelection: true,\n\t\tonColumnFiltersChange: setColumnFilters,\n\t\tonColumnVisibilityChange: setColumnVisibility,\n\t\tonRowSelectionChange: setRowSelection,\n\t\tonSortingChange: setSorting,\n\t\tgetCoreRowModel: getCoreRowModel(),\n\t\tgetFacetedRowModel: getFacetedRowModel(),\n\t\tgetFacetedUniqueValues: getFacetedUniqueValues(),\n\t\tgetFilteredRowModel: getFilteredRowModel(),\n\t\t...(pagination ? { getPaginationRowModel: getPaginationRowModel() } : {}),\n\t\tgetSortedRowModel: getSortedRowModel(),\n\t})\n\n\treturn (\n\t\t<div className='grid gap-4'>\n\t\t\t<Toolbar filters={filters} searchColumn={searchColumn} table={table} />\n\t\t\t<Table>\n\t\t\t\t<TableHeader>\n\t\t\t\t\t{table.getHeaderGroups().map((headerGroup) => (\n\t\t\t\t\t\t<TableRow key={headerGroup.id}>\n\t\t\t\t\t\t\t{headerGroup.headers.map((header) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<TableHead key={header.id} colSpan={header.colSpan}>\n\t\t\t\t\t\t\t\t\t\t{header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\n\t\t\t\t\t\t\t\t\t</TableHead>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t))}\n\t\t\t\t</TableHeader>\n\t\t\t\t<TableBody>\n\t\t\t\t\t{table.getRowModel().rows?.length ? (\n\t\t\t\t\t\ttable.getRowModel().rows.map((row) => (\n\t\t\t\t\t\t\t<TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>\n\t\t\t\t\t\t\t\t{row.getVisibleCells().map((cell) => (\n\t\t\t\t\t\t\t\t\t<TableCell key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</TableCell>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t))\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t<TableCell colSpan={columns.length} className='h-24 text-center'>\n\t\t\t\t\t\t\t\tNo results.\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t)}\n\t\t\t\t</TableBody>\n\t\t\t</Table>\n\t\t\t{pagination && <Pagination table={table} />}\n\t\t</div>\n\t)\n}\n",
				type: 'registry:block',
			},
			{
				path: './components/data-table/example/columns.tsx',
				content:
					"'use client'\n\nimport { Badge } from '@/components/ui/badge'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { ColumnDef } from '@tanstack/react-table'\nimport { ColumnHeader } from '../column-header'\nimport { labels, priorities, statuses, tasks } from './data'\n\nexport const columns: ColumnDef<(typeof tasks)[number]>[] = [\n\t{\n\t\tid: 'select',\n\t\theader: ({ table }) => (\n\t\t\t<Checkbox\n\t\t\t\tchecked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && 'indeterminate')}\n\t\t\t\tonCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n\t\t\t\taria-label='Select all'\n\t\t\t\tclassName='translate-y-[2px]'\n\t\t\t/>\n\t\t),\n\t\tcell: ({ row }) => (\n\t\t\t<Checkbox\n\t\t\t\tchecked={row.getIsSelected()}\n\t\t\t\tonCheckedChange={(value) => row.toggleSelected(!!value)}\n\t\t\t\taria-label='Select row'\n\t\t\t\tclassName='translate-y-[2px]'\n\t\t\t/>\n\t\t),\n\t\tenableSorting: false,\n\t\tenableHiding: false,\n\t},\n\t{\n\t\taccessorKey: 'id',\n\t\theader: ColumnHeader('Task'),\n\t\tcell: ({ row }) => <div className='w-[80px]'>{row.getValue('id')}</div>,\n\t\tenableSorting: false,\n\t\tenableHiding: false,\n\t},\n\t{\n\t\taccessorKey: 'title',\n\t\theader: ColumnHeader('Title'),\n\t\tcell: ({ row }) => {\n\t\t\tconst label = labels.find((label) => label.value === row.original.label)\n\n\t\t\treturn (\n\t\t\t\t<div className='flex space-x-2'>\n\t\t\t\t\t{label && <Badge variant='outline'>{label.label}</Badge>}\n\t\t\t\t\t<span className='max-w-[500px] truncate font-medium'>{row.getValue('title')}</span>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t},\n\t{\n\t\taccessorKey: 'status',\n\t\theader: ColumnHeader('Status'),\n\t\tcell: ({ row }) => {\n\t\t\tconst status = statuses.find((status) => status.value === row.getValue('status'))\n\n\t\t\tif (!status) {\n\t\t\t\treturn null\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\t<div className='flex w-[100px] items-center'>\n\t\t\t\t\t{status.icon && <status.icon className='mr-2 h-4 w-4 text-muted-foreground' />}\n\t\t\t\t\t<span>{status.label}</span>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\tfilterFn: (row, id, value) => {\n\t\t\treturn value.includes(row.getValue(id))\n\t\t},\n\t},\n\t{\n\t\taccessorKey: 'priority',\n\t\theader: ColumnHeader('Priority'),\n\t\tcell: ({ row }) => {\n\t\t\tconst priority = priorities.find((priority) => priority.value === row.getValue('priority'))\n\n\t\t\tif (!priority) {\n\t\t\t\treturn null\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\t<div className='flex items-center'>\n\t\t\t\t\t{priority.icon && <priority.icon className='mr-2 h-4 w-4 text-muted-foreground' />}\n\t\t\t\t\t<span>{priority.label}</span>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\tfilterFn: (row, id, value) => {\n\t\t\treturn value.includes(row.getValue(id))\n\t\t},\n\t},\n\t{\n\t\taccessorKey: 'createdAt',\n\t\theader: ColumnHeader('Created at'),\n\t\tcell: ({ row }) => new Date(row.getValue('createdAt')).toLocaleString(),\n\t},\n]\n",
				type: 'registry:block',
			},
			{
				path: './components/data-table/example/data.ts',
				content:
					"import { ArrowDown, ArrowRight, ArrowUp, CheckCircle, Circle, CircleOff, HelpCircle, Timer } from 'lucide-react'\n\nexport const labels = [\n\t{\n\t\tvalue: 'bug',\n\t\tlabel: 'Bug',\n\t},\n\t{\n\t\tvalue: 'feature',\n\t\tlabel: 'Feature',\n\t},\n\t{\n\t\tvalue: 'documentation',\n\t\tlabel: 'Documentation',\n\t},\n]\n\nexport const statuses = [\n\t{\n\t\tvalue: 'backlog',\n\t\tlabel: 'Backlog',\n\t\ticon: HelpCircle,\n\t},\n\t{\n\t\tvalue: 'todo',\n\t\tlabel: 'Todo',\n\t\ticon: Circle,\n\t},\n\t{\n\t\tvalue: 'in progress',\n\t\tlabel: 'In Progress',\n\t\ticon: Timer,\n\t},\n\t{\n\t\tvalue: 'done',\n\t\tlabel: 'Done',\n\t\ticon: CheckCircle,\n\t},\n\t{\n\t\tvalue: 'canceled',\n\t\tlabel: 'Canceled',\n\t\ticon: CircleOff,\n\t},\n]\n\nexport const priorities = [\n\t{\n\t\tlabel: 'Low',\n\t\tvalue: 'low',\n\t\ticon: ArrowDown,\n\t},\n\t{\n\t\tlabel: 'Medium',\n\t\tvalue: 'medium',\n\t\ticon: ArrowRight,\n\t},\n\t{\n\t\tlabel: 'High',\n\t\tvalue: 'high',\n\t\ticon: ArrowUp,\n\t},\n]\n\nexport const tasks = [\n\t{\n\t\tid: 'TASK-8782',\n\t\ttitle: \"You can't compress the program without quantifying the open-source SSD pixel!\",\n\t\tstatus: 'in progress',\n\t\tlabel: 'documentation',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2024-01-15T09:00:00Z',\n\t},\n\t{\n\t\tid: 'TASK-7878',\n\t\ttitle: 'Try to calculate the EXE feed, maybe it will index the multi-byte pixel!',\n\t\tstatus: 'backlog',\n\t\tlabel: 'documentation',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2024-01-14T15:30:00Z',\n\t},\n\t{\n\t\tid: 'TASK-7839',\n\t\ttitle: 'We need to bypass the neural TCP card!',\n\t\tstatus: 'todo',\n\t\tlabel: 'bug',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2024-01-13T11:20:00Z',\n\t},\n\t{\n\t\tid: 'TASK-5562',\n\t\ttitle: 'The SAS interface is down, bypass the open-source pixel so we can back up the PNG bandwidth!',\n\t\tstatus: 'backlog',\n\t\tlabel: 'feature',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2024-01-12T14:45:00Z',\n\t},\n\t{\n\t\tid: 'TASK-8686',\n\t\ttitle: \"I'll parse the wireless SSL protocol, that should driver the API panel!\",\n\t\tstatus: 'canceled',\n\t\tlabel: 'feature',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2024-01-11T10:15:00Z',\n\t},\n\t{\n\t\tid: 'TASK-1280',\n\t\ttitle: 'Use the digital TLS panel, then you can transmit the haptic system!',\n\t\tstatus: 'done',\n\t\tlabel: 'bug',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2024-01-10T16:40:00Z',\n\t},\n\t{\n\t\tid: 'TASK-7262',\n\t\ttitle: 'The UTF8 application is down, parse the neural bandwidth so we can back up the PNG firewall!',\n\t\tstatus: 'done',\n\t\tlabel: 'feature',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2024-01-09T12:30:00Z',\n\t},\n\t{\n\t\tid: 'TASK-1138',\n\t\ttitle: \"Generating the driver won't do anything, we need to quantify the 1080p SMTP bandwidth!\",\n\t\tstatus: 'in progress',\n\t\tlabel: 'feature',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2023-11-20T09:15:00Z',\n\t},\n\t{\n\t\tid: 'TASK-7184',\n\t\ttitle: 'We need to program the back-end THX pixel!',\n\t\tstatus: 'todo',\n\t\tlabel: 'feature',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2023-12-21T14:20:00Z',\n\t},\n\t{\n\t\tid: 'TASK-5160',\n\t\ttitle: \"Calculating the bus won't do anything, we need to navigate the back-end JSON protocol!\",\n\t\tstatus: 'in progress',\n\t\tlabel: 'documentation',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2023-12-22T10:30:00Z',\n\t},\n\t{\n\t\tid: 'TASK-5618',\n\t\ttitle: \"Generating the driver won't do anything, we need to index the online SSL application!\",\n\t\tstatus: 'done',\n\t\tlabel: 'documentation',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2023-12-23T15:45:00Z',\n\t},\n\t{\n\t\tid: 'TASK-6699',\n\t\ttitle: \"I'll transmit the wireless JBOD capacitor, that should hard drive the SSD feed!\",\n\t\tstatus: 'backlog',\n\t\tlabel: 'documentation',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2023-12-24T09:10:00Z',\n\t},\n\t{\n\t\tid: 'TASK-2858',\n\t\ttitle: 'We need to override the online UDP bus!',\n\t\tstatus: 'backlog',\n\t\tlabel: 'bug',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2023-12-25T11:25:00Z',\n\t},\n\t{\n\t\tid: 'TASK-9864',\n\t\ttitle: \"I'll reboot the 1080p FTP panel, that should matrix the HEX hard drive!\",\n\t\tstatus: 'done',\n\t\tlabel: 'bug',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2023-12-26T14:00:00Z',\n\t},\n\t{\n\t\tid: 'TASK-8404',\n\t\ttitle: 'We need to generate the virtual HEX alarm!',\n\t\tstatus: 'in progress',\n\t\tlabel: 'bug',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2023-12-27T10:15:00Z',\n\t},\n\t{\n\t\tid: 'TASK-5365',\n\t\ttitle: \"Backing up the pixel won't do anything, we need to transmit the primary IB array!\",\n\t\tstatus: 'in progress',\n\t\tlabel: 'documentation',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2023-12-28T13:30:00Z',\n\t},\n\t{\n\t\tid: 'TASK-1780',\n\t\ttitle: 'The CSS feed is down, index the bluetooth transmitter so we can compress the CLI protocol!',\n\t\tstatus: 'todo',\n\t\tlabel: 'documentation',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2023-12-29T09:45:00Z',\n\t},\n\t{\n\t\tid: 'TASK-6938',\n\t\ttitle: 'Use the redundant SCSI application, then you can hack the optical alarm!',\n\t\tstatus: 'todo',\n\t\tlabel: 'documentation',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2023-12-30T11:00:00Z',\n\t},\n\t{\n\t\tid: 'TASK-9885',\n\t\ttitle: 'We need to compress the auxiliary VGA driver!',\n\t\tstatus: 'backlog',\n\t\tlabel: 'bug',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2023-12-31T14:15:00Z',\n\t},\n\t{\n\t\tid: 'TASK-3216',\n\t\ttitle: \"Transmitting the transmitter won't do anything, we need to compress the virtual HDD sensor!\",\n\t\tstatus: 'backlog',\n\t\tlabel: 'documentation',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2024-01-01T09:30:00Z',\n\t},\n\t{\n\t\tid: 'TASK-9285',\n\t\ttitle: 'The IP monitor is down, copy the haptic alarm so we can generate the HTTP transmitter!',\n\t\tstatus: 'todo',\n\t\tlabel: 'bug',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2024-01-02T11:45:00Z',\n\t},\n\t{\n\t\tid: 'TASK-1024',\n\t\ttitle: \"Overriding the microchip won't do anything, we need to transmit the digital OCR transmitter!\",\n\t\tstatus: 'in progress',\n\t\tlabel: 'documentation',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-01-03T14:00:00Z',\n\t},\n\t{\n\t\tid: 'TASK-7068',\n\t\ttitle: \"You can't generate the capacitor without indexing the wireless HEX pixel!\",\n\t\tstatus: 'canceled',\n\t\tlabel: 'bug',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-01-04T10:15:00Z',\n\t},\n\t{\n\t\tid: 'TASK-6502',\n\t\ttitle: \"Navigating the microchip won't do anything, we need to bypass the back-end SQL bus!\",\n\t\tstatus: 'todo',\n\t\tlabel: 'bug',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2024-01-05T13:30:00Z',\n\t},\n\t{\n\t\tid: 'TASK-5326',\n\t\ttitle: 'We need to hack the redundant UTF8 transmitter!',\n\t\tstatus: 'todo',\n\t\tlabel: 'bug',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-01-06T09:45:00Z',\n\t},\n\t{\n\t\tid: 'TASK-6274',\n\t\ttitle: 'Use the virtual PCI circuit, then you can parse the bluetooth alarm!',\n\t\tstatus: 'canceled',\n\t\tlabel: 'documentation',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-01-07T11:00:00Z',\n\t},\n\t{\n\t\tid: 'TASK-1571',\n\t\ttitle: \"I'll input the neural DRAM circuit, that should protocol the SMTP interface!\",\n\t\tstatus: 'in progress',\n\t\tlabel: 'feature',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2024-01-08T14:15:00Z',\n\t},\n\t{\n\t\tid: 'TASK-9518',\n\t\ttitle: \"Compressing the interface won't do anything, we need to compress the online SDD matrix!\",\n\t\tstatus: 'canceled',\n\t\tlabel: 'documentation',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2024-01-09T10:30:00Z',\n\t},\n\t{\n\t\tid: 'TASK-5581',\n\t\ttitle: \"I'll synthesize the digital COM pixel, that should transmitter the UTF8 protocol!\",\n\t\tstatus: 'backlog',\n\t\tlabel: 'documentation',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2024-01-10T13:45:00Z',\n\t},\n\t{\n\t\tid: 'TASK-2197',\n\t\ttitle: \"Parsing the feed won't do anything, we need to copy the bluetooth DRAM bus!\",\n\t\tstatus: 'todo',\n\t\tlabel: 'documentation',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-01-11T09:00:00Z',\n\t},\n\t{\n\t\tid: 'TASK-8484',\n\t\ttitle: 'We need to parse the solid state UDP firewall!',\n\t\tstatus: 'in progress',\n\t\tlabel: 'bug',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-01-12T11:15:00Z',\n\t},\n\t{\n\t\tid: 'TASK-9892',\n\t\ttitle: 'If we back up the application, we can get to the UDP application through the multi-byte THX capacitor!',\n\t\tstatus: 'done',\n\t\tlabel: 'documentation',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2024-01-13T14:30:00Z',\n\t},\n\t{\n\t\tid: 'TASK-9616',\n\t\ttitle: 'We need to synthesize the cross-platform ASCII pixel!',\n\t\tstatus: 'in progress',\n\t\tlabel: 'feature',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2024-01-14T09:45:00Z',\n\t},\n\t{\n\t\tid: 'TASK-9744',\n\t\ttitle: 'Use the back-end IP card, then you can input the solid state hard drive!',\n\t\tstatus: 'done',\n\t\tlabel: 'documentation',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-01-15T11:00:00Z',\n\t},\n\t{\n\t\tid: 'TASK-1376',\n\t\ttitle: \"Generating the alarm won't do anything, we need to generate the mobile IP capacitor!\",\n\t\tstatus: 'backlog',\n\t\tlabel: 'documentation',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-01-16T09:15:00Z',\n\t},\n\t{\n\t\tid: 'TASK-7382',\n\t\ttitle: 'If we back up the firewall, we can get to the RAM alarm through the primary UTF8 pixel!',\n\t\tstatus: 'todo',\n\t\tlabel: 'feature',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-01-17T11:30:00Z',\n\t},\n\t{\n\t\tid: 'TASK-2290',\n\t\ttitle: \"I'll compress the virtual JSON panel, that should application the UTF8 bus!\",\n\t\tstatus: 'canceled',\n\t\tlabel: 'documentation',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2024-01-18T14:45:00Z',\n\t},\n\t{\n\t\tid: 'TASK-1533',\n\t\ttitle: \"You can't input the firewall without overriding the wireless TCP firewall!\",\n\t\tstatus: 'done',\n\t\tlabel: 'bug',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2024-01-19T09:00:00Z',\n\t},\n\t{\n\t\tid: 'TASK-4920',\n\t\ttitle: \"Bypassing the hard drive won't do anything, we need to input the bluetooth JSON program!\",\n\t\tstatus: 'in progress',\n\t\tlabel: 'bug',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2024-01-20T11:15:00Z',\n\t},\n\t{\n\t\tid: 'TASK-5168',\n\t\ttitle: 'If we synthesize the bus, we can get to the IP panel through the virtual TLS array!',\n\t\tstatus: 'in progress',\n\t\tlabel: 'feature',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-01-21T14:30:00Z',\n\t},\n\t{\n\t\tid: 'TASK-7103',\n\t\ttitle: 'We need to parse the multi-byte EXE bandwidth!',\n\t\tstatus: 'canceled',\n\t\tlabel: 'feature',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-01-22T09:45:00Z',\n\t},\n\t{\n\t\tid: 'TASK-4314',\n\t\ttitle: 'If we compress the program, we can get to the XML alarm through the multi-byte COM matrix!',\n\t\tstatus: 'in progress',\n\t\tlabel: 'bug',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2024-01-23T11:00:00Z',\n\t},\n\t{\n\t\tid: 'TASK-3415',\n\t\ttitle: 'Use the cross-platform XML application, then you can quantify the solid state feed!',\n\t\tstatus: 'todo',\n\t\tlabel: 'feature',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2024-01-24T14:15:00Z',\n\t},\n\t{\n\t\tid: 'TASK-8339',\n\t\ttitle: 'Try to calculate the DNS interface, maybe it will input the bluetooth capacitor!',\n\t\tstatus: 'in progress',\n\t\tlabel: 'feature',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-01-25T09:30:00Z',\n\t},\n\t{\n\t\tid: 'TASK-6995',\n\t\ttitle: 'Try to hack the XSS bandwidth, maybe it will override the bluetooth matrix!',\n\t\tstatus: 'todo',\n\t\tlabel: 'feature',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2024-01-26T11:45:00Z',\n\t},\n\t{\n\t\tid: 'TASK-8053',\n\t\ttitle: 'If we connect the program, we can get to the UTF8 matrix through the digital UDP protocol!',\n\t\tstatus: 'todo',\n\t\tlabel: 'feature',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2024-01-27T14:00:00Z',\n\t},\n\t{\n\t\tid: 'TASK-4336',\n\t\ttitle: 'If we synthesize the microchip, we can get to the SAS sensor through the optical UDP program!',\n\t\tstatus: 'todo',\n\t\tlabel: 'documentation',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-01-28T09:15:00Z',\n\t},\n\t{\n\t\tid: 'TASK-8790',\n\t\ttitle: \"I'll back up the optical COM alarm, that should alarm the RSS capacitor!\",\n\t\tstatus: 'done',\n\t\tlabel: 'bug',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2024-01-29T11:30:00Z',\n\t},\n\t{\n\t\tid: 'TASK-8980',\n\t\ttitle: 'Try to navigate the SQL transmitter, maybe it will back up the virtual firewall!',\n\t\tstatus: 'canceled',\n\t\tlabel: 'bug',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-01-30T14:45:00Z',\n\t},\n\t{\n\t\tid: 'TASK-7342',\n\t\ttitle: 'Use the neural CLI card, then you can parse the online port!',\n\t\tstatus: 'backlog',\n\t\tlabel: 'documentation',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-01-31T09:00:00Z',\n\t},\n\t{\n\t\tid: 'TASK-5608',\n\t\ttitle: \"I'll hack the haptic SSL program, that should bus the UDP transmitter!\",\n\t\tstatus: 'canceled',\n\t\tlabel: 'documentation',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-02-01T11:15:00Z',\n\t},\n\t{\n\t\tid: 'TASK-1606',\n\t\ttitle: \"I'll generate the bluetooth PNG firewall, that should pixel the SSL driver!\",\n\t\tstatus: 'done',\n\t\tlabel: 'feature',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2024-02-02T14:30:00Z',\n\t},\n\t{\n\t\tid: 'TASK-7872',\n\t\ttitle: \"Transmitting the circuit won't do anything, we need to reboot the 1080p RSS monitor!\",\n\t\tstatus: 'canceled',\n\t\tlabel: 'feature',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2024-02-03T09:45:00Z',\n\t},\n\t{\n\t\tid: 'TASK-4167',\n\t\ttitle: 'Use the cross-platform SMS circuit, then you can synthesize the optical feed!',\n\t\tstatus: 'canceled',\n\t\tlabel: 'bug',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2024-02-04T11:00:00Z',\n\t},\n\t{\n\t\tid: 'TASK-9581',\n\t\ttitle: \"You can't index the port without hacking the cross-platform XSS monitor!\",\n\t\tstatus: 'backlog',\n\t\tlabel: 'documentation',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-02-05T14:15:00Z',\n\t},\n\t{\n\t\tid: 'TASK-8806',\n\t\ttitle: 'We need to bypass the back-end SSL panel!',\n\t\tstatus: 'done',\n\t\tlabel: 'bug',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2024-02-06T09:30:00Z',\n\t},\n\t{\n\t\tid: 'TASK-6542',\n\t\ttitle: 'Try to quantify the RSS firewall, maybe it will quantify the open-source system!',\n\t\tstatus: 'done',\n\t\tlabel: 'feature',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-02-07T11:45:00Z',\n\t},\n\t{\n\t\tid: 'TASK-6806',\n\t\ttitle: 'The VGA protocol is down, reboot the back-end matrix so we can parse the CSS panel!',\n\t\tstatus: 'canceled',\n\t\tlabel: 'documentation',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-02-08T14:00:00Z',\n\t},\n\t{\n\t\tid: 'TASK-9549',\n\t\ttitle: \"You can't bypass the bus without connecting the neural JBOD bus!\",\n\t\tstatus: 'todo',\n\t\tlabel: 'feature',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2024-02-09T09:15:00Z',\n\t},\n\t{\n\t\tid: 'TASK-1075',\n\t\ttitle: \"Backing up the driver won't do anything, we need to parse the redundant RAM pixel!\",\n\t\tstatus: 'done',\n\t\tlabel: 'feature',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2024-02-10T11:30:00Z',\n\t},\n\t{\n\t\tid: 'TASK-1427',\n\t\ttitle: 'Use the auxiliary PCI circuit, then you can calculate the cross-platform interface!',\n\t\tstatus: 'done',\n\t\tlabel: 'documentation',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2024-02-11T14:45:00Z',\n\t},\n\t{\n\t\tid: 'TASK-1907',\n\t\ttitle: \"Hacking the circuit won't do anything, we need to back up the online DRAM system!\",\n\t\tstatus: 'todo',\n\t\tlabel: 'documentation',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2024-02-12T09:00:00Z',\n\t},\n\t{\n\t\tid: 'TASK-4309',\n\t\ttitle: 'If we generate the system, we can get to the TCP sensor through the optical GB pixel!',\n\t\tstatus: 'backlog',\n\t\tlabel: 'bug',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2024-02-13T11:15:00Z',\n\t},\n\t{\n\t\tid: 'TASK-3973',\n\t\ttitle: \"I'll parse the back-end ADP array, that should bandwidth the RSS bandwidth!\",\n\t\tstatus: 'todo',\n\t\tlabel: 'feature',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2024-02-14T14:30:00Z',\n\t},\n\t{\n\t\tid: 'TASK-7962',\n\t\ttitle: 'Use the wireless RAM program, then you can hack the cross-platform feed!',\n\t\tstatus: 'canceled',\n\t\tlabel: 'bug',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-02-15T09:45:00Z',\n\t},\n\t{\n\t\tid: 'TASK-3360',\n\t\ttitle: \"You can't quantify the program without synthesizing the neural OCR interface!\",\n\t\tstatus: 'done',\n\t\tlabel: 'feature',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2024-02-16T11:00:00Z',\n\t},\n\t{\n\t\tid: 'TASK-9887',\n\t\ttitle: 'Use the auxiliary ASCII sensor, then you can connect the solid state port!',\n\t\tstatus: 'backlog',\n\t\tlabel: 'bug',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2024-02-17T14:15:00Z',\n\t},\n\t{\n\t\tid: 'TASK-3649',\n\t\ttitle: \"I'll input the virtual USB system, that should circuit the DNS monitor!\",\n\t\tstatus: 'in progress',\n\t\tlabel: 'feature',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2024-02-18T09:30:00Z',\n\t},\n\t{\n\t\tid: 'TASK-3586',\n\t\ttitle: 'If we quantify the circuit, we can get to the CLI feed through the mobile SMS hard drive!',\n\t\tstatus: 'in progress',\n\t\tlabel: 'bug',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-02-19T11:45:00Z',\n\t},\n\t{\n\t\tid: 'TASK-5150',\n\t\ttitle: \"I'll hack the wireless XSS port, that should transmitter the IP interface!\",\n\t\tstatus: 'canceled',\n\t\tlabel: 'feature',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2024-02-20T14:00:00Z',\n\t},\n\t{\n\t\tid: 'TASK-3652',\n\t\ttitle: 'The SQL interface is down, override the optical bus so we can program the ASCII interface!',\n\t\tstatus: 'backlog',\n\t\tlabel: 'feature',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-02-21T09:15:00Z',\n\t},\n\t{\n\t\tid: 'TASK-6884',\n\t\ttitle: 'Use the digital PCI circuit, then you can synthesize the multi-byte microchip!',\n\t\tstatus: 'canceled',\n\t\tlabel: 'feature',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2024-02-22T11:30:00Z',\n\t},\n\t{\n\t\tid: 'TASK-1591',\n\t\ttitle: 'We need to connect the mobile XSS driver!',\n\t\tstatus: 'in progress',\n\t\tlabel: 'feature',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2024-02-23T14:45:00Z',\n\t},\n\t{\n\t\tid: 'TASK-3802',\n\t\ttitle: 'Try to override the ASCII protocol, maybe it will parse the virtual matrix!',\n\t\tstatus: 'in progress',\n\t\tlabel: 'feature',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-02-24T09:00:00Z',\n\t},\n\t{\n\t\tid: 'TASK-7253',\n\t\ttitle: \"Programming the capacitor won't do anything, we need to bypass the neural IB hard drive!\",\n\t\tstatus: 'backlog',\n\t\tlabel: 'bug',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2024-02-25T11:15:00Z',\n\t},\n\t{\n\t\tid: 'TASK-9739',\n\t\ttitle: 'We need to hack the multi-byte HDD bus!',\n\t\tstatus: 'done',\n\t\tlabel: 'documentation',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2024-02-26T14:30:00Z',\n\t},\n\t{\n\t\tid: 'TASK-4424',\n\t\ttitle: 'Try to hack the HEX alarm, maybe it will connect the optical pixel!',\n\t\tstatus: 'in progress',\n\t\tlabel: 'documentation',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2024-02-27T09:45:00Z',\n\t},\n\t{\n\t\tid: 'TASK-3922',\n\t\ttitle: \"You can't back up the capacitor without generating the wireless PCI program!\",\n\t\tstatus: 'backlog',\n\t\tlabel: 'bug',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-02-28T11:00:00Z',\n\t},\n\t{\n\t\tid: 'TASK-4921',\n\t\ttitle: \"I'll index the open-source IP feed, that should system the GB application!\",\n\t\tstatus: 'canceled',\n\t\tlabel: 'bug',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-02-29T14:15:00Z',\n\t},\n\t{\n\t\tid: 'TASK-5814',\n\t\ttitle: 'We need to calculate the 1080p AGP feed!',\n\t\tstatus: 'backlog',\n\t\tlabel: 'bug',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2024-03-01T09:30:00Z',\n\t},\n\t{\n\t\tid: 'TASK-2645',\n\t\ttitle: \"Synthesizing the system won't do anything, we need to navigate the multi-byte HDD firewall!\",\n\t\tstatus: 'todo',\n\t\tlabel: 'documentation',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2024-03-02T11:45:00Z',\n\t},\n\t{\n\t\tid: 'TASK-4535',\n\t\ttitle: 'Try to copy the JSON circuit, maybe it will connect the wireless feed!',\n\t\tstatus: 'in progress',\n\t\tlabel: 'feature',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-03-03T14:00:00Z',\n\t},\n\t{\n\t\tid: 'TASK-4463',\n\t\ttitle: 'We need to copy the solid state AGP monitor!',\n\t\tstatus: 'done',\n\t\tlabel: 'documentation',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-03-04T09:15:00Z',\n\t},\n\t{\n\t\tid: 'TASK-9745',\n\t\ttitle: 'If we connect the protocol, we can get to the GB system through the bluetooth PCI microchip!',\n\t\tstatus: 'canceled',\n\t\tlabel: 'feature',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2024-03-05T11:30:00Z',\n\t},\n\t{\n\t\tid: 'TASK-2080',\n\t\ttitle: 'If we input the bus, we can get to the RAM matrix through the auxiliary RAM card!',\n\t\tstatus: 'todo',\n\t\tlabel: 'bug',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2024-03-06T14:45:00Z',\n\t},\n\t{\n\t\tid: 'TASK-3838',\n\t\ttitle: \"I'll bypass the online TCP application, that should panel the AGP system!\",\n\t\tstatus: 'backlog',\n\t\tlabel: 'bug',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2024-03-07T09:00:00Z',\n\t},\n\t{\n\t\tid: 'TASK-1340',\n\t\ttitle: 'We need to navigate the virtual PNG circuit!',\n\t\tstatus: 'todo',\n\t\tlabel: 'bug',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2024-03-08T11:15:00Z',\n\t},\n\t{\n\t\tid: 'TASK-6665',\n\t\ttitle: 'If we parse the monitor, we can get to the SSD hard drive through the cross-platform AGP alarm!',\n\t\tstatus: 'canceled',\n\t\tlabel: 'feature',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-03-09T14:30:00Z',\n\t},\n\t{\n\t\tid: 'TASK-7585',\n\t\ttitle: 'If we calculate the hard drive, we can get to the SSL program through the multi-byte CSS microchip!',\n\t\tstatus: 'backlog',\n\t\tlabel: 'feature',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-03-10T09:45:00Z',\n\t},\n\t{\n\t\tid: 'TASK-6319',\n\t\ttitle: 'We need to copy the multi-byte SCSI program!',\n\t\tstatus: 'backlog',\n\t\tlabel: 'bug',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2024-03-11T11:00:00Z',\n\t},\n\t{\n\t\tid: 'TASK-4369',\n\t\ttitle: 'Try to input the SCSI bus, maybe it will generate the 1080p pixel!',\n\t\tstatus: 'backlog',\n\t\tlabel: 'bug',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2024-03-12T14:15:00Z',\n\t},\n\t{\n\t\tid: 'TASK-9035',\n\t\ttitle: 'We need to override the solid state PNG array!',\n\t\tstatus: 'canceled',\n\t\tlabel: 'documentation',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-03-13T09:30:00Z',\n\t},\n\t{\n\t\tid: 'TASK-3970',\n\t\ttitle: \"You can't index the transmitter without quantifying the haptic ASCII card!\",\n\t\tstatus: 'todo',\n\t\tlabel: 'documentation',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2024-03-14T11:45:00Z',\n\t},\n\t{\n\t\tid: 'TASK-4473',\n\t\ttitle: \"You can't bypass the protocol without overriding the neural RSS program!\",\n\t\tstatus: 'todo',\n\t\tlabel: 'documentation',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-03-15T14:00:00Z',\n\t},\n\t{\n\t\tid: 'TASK-4136',\n\t\ttitle: \"You can't hack the hard drive without hacking the primary JSON program!\",\n\t\tstatus: 'canceled',\n\t\tlabel: 'bug',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2024-03-16T09:15:00Z',\n\t},\n\t{\n\t\tid: 'TASK-3939',\n\t\ttitle: 'Use the back-end SQL firewall, then you can connect the neural hard drive!',\n\t\tstatus: 'done',\n\t\tlabel: 'feature',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-03-17T11:30:00Z',\n\t},\n\t{\n\t\tid: 'TASK-2007',\n\t\ttitle: \"I'll input the back-end USB protocol, that should bandwidth the PCI system!\",\n\t\tstatus: 'backlog',\n\t\tlabel: 'bug',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2024-03-18T14:45:00Z',\n\t},\n\t{\n\t\tid: 'TASK-7516',\n\t\ttitle: 'Use the primary SQL program, then you can generate the auxiliary transmitter!',\n\t\tstatus: 'done',\n\t\tlabel: 'documentation',\n\t\tpriority: 'medium',\n\t\tcreatedAt: '2024-03-19T09:00:00Z',\n\t},\n\t{\n\t\tid: 'TASK-6906',\n\t\ttitle: 'Try to back up the DRAM system, maybe it will reboot the online transmitter!',\n\t\tstatus: 'done',\n\t\tlabel: 'feature',\n\t\tpriority: 'high',\n\t\tcreatedAt: '2024-03-20T11:15:00Z',\n\t},\n\t{\n\t\tid: 'TASK-5207',\n\t\ttitle: 'The SMS interface is down, copy the bluetooth bus so we can quantify the VGA card!',\n\t\tstatus: 'in progress',\n\t\tlabel: 'bug',\n\t\tpriority: 'low',\n\t\tcreatedAt: '2024-03-21T14:30:00Z',\n\t},\n]\n",
				type: 'registry:block',
			},
			{
				path: './components/data-table/example/example-table.tsx',
				content:
					"'use client'\n\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { DataTable } from '../data-table'\nimport { columns } from './columns'\nimport { priorities, statuses, tasks } from './data'\n\nexport function ExampleTable() {\n\treturn (\n\t\t<div className='container mx-auto py-10'>\n\t\t\t<Card>\n\t\t\t\t<CardHeader>\n\t\t\t\t\t<CardTitle>Tasks</CardTitle>\n\t\t\t\t</CardHeader>\n\t\t\t\t<CardContent>\n\t\t\t\t\t<DataTable\n\t\t\t\t\t\tcolumns={columns}\n\t\t\t\t\t\tdata={tasks}\n\t\t\t\t\t\tdefaultState={{ sorting: [{ id: 'createdAt', desc: true }] }}\n\t\t\t\t\t\tfilters={[\n\t\t\t\t\t\t\t{ columnId: 'status', title: 'Status', options: statuses },\n\t\t\t\t\t\t\t{ columnId: 'priority', title: 'Priority', options: priorities },\n\t\t\t\t\t\t]}\n\t\t\t\t\t\tpagination\n\t\t\t\t\t\tsearchColumn='title'\n\t\t\t\t\t/>\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t</div>\n\t)\n}\n",
				type: 'registry:block',
			},
			{
				path: './components/data-table/faceted-filter.tsx',
				content:
					"import { Badge } from '@/components/ui/badge'\nimport { Button } from '@/components/ui/button'\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList, CommandSeparator } from '@/components/ui/command'\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'\nimport { Separator } from '@/components/ui/separator'\nimport { cn } from '@/lib/utils'\nimport { Table } from '@tanstack/react-table'\nimport { Check, PlusCircle } from 'lucide-react'\nimport { ComponentType } from 'react'\n\nexport type FacetedFilterProps<TData> = {\n\tcolumnId: string\n\ttable: Table<TData>\n\ttitle: string\n\toptions: {\n\t\tlabel: string\n\t\tvalue: string\n\t\ticon?: ComponentType<{ className?: string }>\n\t}[]\n}\n\nexport function FacetedFilter<TData>({ columnId, table, title, options }: FacetedFilterProps<TData>) {\n\tconst column = table.getColumn(columnId)\n\tif (!column) return null\n\n\tconst facets = column?.getFacetedUniqueValues()\n\tconst selectedValues = new Set(column?.getFilterValue() as string[])\n\n\treturn (\n\t\t<Popover>\n\t\t\t<PopoverTrigger asChild>\n\t\t\t\t<Button variant='outline' size='sm' className='h-8 border-dashed'>\n\t\t\t\t\t<PlusCircle />\n\t\t\t\t\t{title}\n\t\t\t\t\t{selectedValues?.size > 0 && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<Separator orientation='vertical' className='mx-2 h-4' />\n\t\t\t\t\t\t\t<Badge variant='secondary' className='rounded-sm px-1 font-normal lg:hidden'>\n\t\t\t\t\t\t\t\t{selectedValues.size}\n\t\t\t\t\t\t\t</Badge>\n\t\t\t\t\t\t\t<div className='hidden space-x-1 lg:flex'>\n\t\t\t\t\t\t\t\t{selectedValues.size > 2 ? (\n\t\t\t\t\t\t\t\t\t<Badge variant='secondary' className='rounded-sm px-1 font-normal'>\n\t\t\t\t\t\t\t\t\t\t{selectedValues.size} selected\n\t\t\t\t\t\t\t\t\t</Badge>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\toptions\n\t\t\t\t\t\t\t\t\t\t.filter((option) => selectedValues.has(option.value))\n\t\t\t\t\t\t\t\t\t\t.map((option) => (\n\t\t\t\t\t\t\t\t\t\t\t<Badge variant='secondary' key={option.value} className='rounded-sm px-1 font-normal'>\n\t\t\t\t\t\t\t\t\t\t\t\t{option.label}\n\t\t\t\t\t\t\t\t\t\t\t</Badge>\n\t\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</Button>\n\t\t\t</PopoverTrigger>\n\t\t\t<PopoverContent className='w-[200px] p-0' align='start'>\n\t\t\t\t<Command>\n\t\t\t\t\t<CommandInput placeholder={title} />\n\t\t\t\t\t<CommandList>\n\t\t\t\t\t\t<CommandEmpty>No results found.</CommandEmpty>\n\t\t\t\t\t\t<CommandGroup>\n\t\t\t\t\t\t\t{options.map((option) => {\n\t\t\t\t\t\t\t\tconst isSelected = selectedValues.has(option.value)\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<CommandItem\n\t\t\t\t\t\t\t\t\t\tkey={option.value}\n\t\t\t\t\t\t\t\t\t\tonSelect={() => {\n\t\t\t\t\t\t\t\t\t\t\tif (isSelected) {\n\t\t\t\t\t\t\t\t\t\t\t\tselectedValues.delete(option.value)\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tselectedValues.add(option.value)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tconst filterValues = Array.from(selectedValues)\n\t\t\t\t\t\t\t\t\t\t\tcolumn?.setFilterValue(filterValues.length ? filterValues : undefined)\n\t\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\t\t\t'mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary',\n\t\t\t\t\t\t\t\t\t\t\t\tisSelected ? 'bg-primary text-primary-foreground' : 'opacity-50 [&_svg]:invisible'\n\t\t\t\t\t\t\t\t\t\t\t)}>\n\t\t\t\t\t\t\t\t\t\t\t<Check />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t{option.icon && <option.icon className='mr-2 h-4 w-4 text-muted-foreground' />}\n\t\t\t\t\t\t\t\t\t\t<span>{option.label}</span>\n\t\t\t\t\t\t\t\t\t\t{facets?.get(option.value) && (\n\t\t\t\t\t\t\t\t\t\t\t<span className='ml-auto flex h-4 w-4 items-center justify-center font-mono text-xs'>\n\t\t\t\t\t\t\t\t\t\t\t\t{facets.get(option.value)}\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</CommandItem>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</CommandGroup>\n\t\t\t\t\t\t{selectedValues.size > 0 && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<CommandSeparator />\n\t\t\t\t\t\t\t\t<CommandGroup>\n\t\t\t\t\t\t\t\t\t<CommandItem onSelect={() => column?.setFilterValue(undefined)} className='justify-center text-center'>\n\t\t\t\t\t\t\t\t\t\tClear filters\n\t\t\t\t\t\t\t\t\t</CommandItem>\n\t\t\t\t\t\t\t\t</CommandGroup>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</CommandList>\n\t\t\t\t</Command>\n\t\t\t</PopoverContent>\n\t\t</Popover>\n\t)\n}\n",
				type: 'registry:block',
			},
			{
				path: './components/data-table/pagination.tsx',
				content:
					"import { Button } from '@/components/ui/button'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { Table } from '@tanstack/react-table'\nimport { ChevronLeft, ChevronRight, ChevronsLeft, ChevronsRight } from 'lucide-react'\n\nexport function Pagination<TData>({ table }: { table: Table<TData> }) {\n\treturn (\n\t\t<div className='flex items-center justify-between px-2'>\n\t\t\t<div className='flex items-center space-x-2'>\n\t\t\t\t<p className='text-sm font-medium'>Rows per page</p>\n\t\t\t\t<Select\n\t\t\t\t\tvalue={`${table.getState().pagination.pageSize}`}\n\t\t\t\t\tonValueChange={(value) => {\n\t\t\t\t\t\ttable.setPageSize(Number(value))\n\t\t\t\t\t}}>\n\t\t\t\t\t<SelectTrigger className='h-8 w-[70px]'>\n\t\t\t\t\t\t<SelectValue placeholder={table.getState().pagination.pageSize} />\n\t\t\t\t\t</SelectTrigger>\n\t\t\t\t\t<SelectContent side='top'>\n\t\t\t\t\t\t{[10, 20, 30, 40, 50].map((pageSize) => (\n\t\t\t\t\t\t\t<SelectItem key={pageSize} value={`${pageSize}`}>\n\t\t\t\t\t\t\t\t{pageSize}\n\t\t\t\t\t\t\t</SelectItem>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</SelectContent>\n\t\t\t\t</Select>\n\t\t\t</div>\n\t\t\t<div className='flex items-center space-x-6 lg:space-x-8'>\n\t\t\t\t<div className='flex w-[100px] items-center justify-center text-sm font-medium'>\n\t\t\t\t\tPage {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}\n\t\t\t\t</div>\n\t\t\t\t<div className='flex items-center space-x-2'>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant='outline'\n\t\t\t\t\t\tclassName='hidden h-8 w-8 p-0 lg:flex'\n\t\t\t\t\t\tonClick={() => table.setPageIndex(0)}\n\t\t\t\t\t\tdisabled={!table.getCanPreviousPage()}>\n\t\t\t\t\t\t<span className='sr-only'>Go to first page</span>\n\t\t\t\t\t\t<ChevronsLeft />\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant='outline'\n\t\t\t\t\t\tclassName='h-8 w-8 p-0'\n\t\t\t\t\t\tonClick={() => table.previousPage()}\n\t\t\t\t\t\tdisabled={!table.getCanPreviousPage()}>\n\t\t\t\t\t\t<span className='sr-only'>Go to previous page</span>\n\t\t\t\t\t\t<ChevronLeft />\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button variant='outline' className='h-8 w-8 p-0' onClick={() => table.nextPage()} disabled={!table.getCanNextPage()}>\n\t\t\t\t\t\t<span className='sr-only'>Go to next page</span>\n\t\t\t\t\t\t<ChevronRight />\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant='outline'\n\t\t\t\t\t\tclassName='hidden h-8 w-8 p-0 lg:flex'\n\t\t\t\t\t\tonClick={() => table.setPageIndex(table.getPageCount() - 1)}\n\t\t\t\t\t\tdisabled={!table.getCanNextPage()}>\n\t\t\t\t\t\t<span className='sr-only'>Go to last page</span>\n\t\t\t\t\t\t<ChevronsRight />\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n",
				type: 'registry:block',
			},
			{
				path: './components/data-table/toolbar.tsx',
				content:
					"'use client'\n\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Table } from '@tanstack/react-table'\nimport { X } from 'lucide-react'\nimport { FacetedFilter, FacetedFilterProps } from './faceted-filter'\nimport { ViewOptions } from './view-options'\n\nexport function Toolbar<TData>({\n\tfilters,\n\tsearchColumn,\n\ttable,\n}: {\n\tfilters?: Omit<FacetedFilterProps<TData>, 'table'>[]\n\tsearchColumn?: string\n\ttable: Table<TData>\n}) {\n\tconst isFiltered = table.getState().columnFilters.length > 0\n\n\treturn (\n\t\t<div className='flex items-center justify-between'>\n\t\t\t<div className='flex flex-1 items-center space-x-2'>\n\t\t\t\t{searchColumn && table.getColumn(searchColumn) && (\n\t\t\t\t\t<Input\n\t\t\t\t\t\tplaceholder='Filter rows...'\n\t\t\t\t\t\tvalue={(table.getColumn(searchColumn)?.getFilterValue() as string) ?? ''}\n\t\t\t\t\t\tonChange={(event) => table.getColumn(searchColumn)?.setFilterValue(event.target.value)}\n\t\t\t\t\t\tclassName='h-8 w-[150px] lg:w-[250px]'\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t{filters?.map((filter) => (\n\t\t\t\t\t<FacetedFilter key={filter.columnId} {...filter} table={table} />\n\t\t\t\t))}\n\t\t\t\t{isFiltered && (\n\t\t\t\t\t<Button variant='ghost' onClick={() => table.resetColumnFilters()} className='h-8 px-2 lg:px-3'>\n\t\t\t\t\t\tReset\n\t\t\t\t\t\t<X />\n\t\t\t\t\t</Button>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<ViewOptions table={table} />\n\t\t</div>\n\t)\n}\n",
				type: 'registry:block',
			},
			{
				path: './components/data-table/view-options.tsx',
				content:
					"'use client'\n\nimport { Button } from '@/components/ui/button'\nimport {\n\tDropdownMenu,\n\tDropdownMenuCheckboxItem,\n\tDropdownMenuContent,\n\tDropdownMenuLabel,\n\tDropdownMenuSeparator,\n\tDropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport { Table } from '@tanstack/react-table'\nimport { Settings2 } from 'lucide-react'\n\nexport function ViewOptions<TData>({ table }: { table: Table<TData> }) {\n\treturn (\n\t\t<DropdownMenu>\n\t\t\t<DropdownMenuTrigger asChild>\n\t\t\t\t<Button variant='outline' size='sm' className='ml-auto hidden h-8 lg:flex'>\n\t\t\t\t\t<Settings2 />\n\t\t\t\t\tView\n\t\t\t\t</Button>\n\t\t\t</DropdownMenuTrigger>\n\t\t\t<DropdownMenuContent align='end' className='w-[150px]'>\n\t\t\t\t<DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\n\t\t\t\t<DropdownMenuSeparator />\n\t\t\t\t{table\n\t\t\t\t\t.getAllColumns()\n\t\t\t\t\t.filter((column) => typeof column.accessorFn !== 'undefined' && column.getCanHide())\n\t\t\t\t\t.map((column) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<DropdownMenuCheckboxItem\n\t\t\t\t\t\t\t\tkey={column.id}\n\t\t\t\t\t\t\t\tclassName='capitalize'\n\t\t\t\t\t\t\t\tchecked={column.getIsVisible()}\n\t\t\t\t\t\t\t\tonCheckedChange={(value) => column.toggleVisibility(!!value)}>\n\t\t\t\t\t\t\t\t{column.id}\n\t\t\t\t\t\t\t</DropdownMenuCheckboxItem>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t</DropdownMenuContent>\n\t\t</DropdownMenu>\n\t)\n}\n",
				type: 'registry:block',
			},
		],
		tailwind: {},
		cssVars: {},
		meta: {},
	})
