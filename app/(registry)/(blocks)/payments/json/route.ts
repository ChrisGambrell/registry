export const GET = () =>
	Response.json({
		name: 'payments',
		type: 'registry:block',
		dependencies: [
			'@auth/prisma-adapter',
			'@cgambrell/utils',
			'@mdx-js/loader',
			'@mdx-js/react',
			'@next/mdx',
			'@prisma/client',
			'@radix-ui/react-avatar',
			'@radix-ui/react-collapsible',
			'@radix-ui/react-dialog',
			'@radix-ui/react-dropdown-menu',
			'@radix-ui/react-label',
			'@radix-ui/react-separator',
			'@radix-ui/react-slot',
			'@radix-ui/react-tabs',
			'@radix-ui/react-tooltip',
			'@stripe/stripe-js',
			'@t3-oss/env-nextjs',
			'@tailwindcss/typography',
			'@types/bcryptjs',
			'@types/mdx',
			'bcryptjs',
			'next-auth@beta',
			'prisma',
			'react-hot-toast',
			'stripe',
			'ts-node',
		],
		devDependencies: [],
		registryDependencies: [
			'avatar',
			'button',
			'card',
			'collapsible',
			'dropdown-menu',
			'input',
			'label',
			'separator',
			'sheet',
			'skeleton',
			'tabs',
			'tooltip',
		],
		files: [
			{
				path: './.env.example',
				content:
					'AUTH_SECRET=""\n\nAUTH_GITHUB_ID=""\nAUTH_GITHUB_SECRET=""\n\nAUTH_GOOGLE_ID=""\nAUTH_GOOGLE_SECRET=""\n\nAUTH_RESEND_KEY=""\nAUTH_RESEND_EMAIL="noreply@example.com"\n\nDATABASE_URL="postgresql://postgres:password@localhost:5432/postgres?schema=public"\n\nSTRIPE_SECRET_KEY=""\nSTRIPE_WEBHOOK_SECRET=""\n\nNEXT_PUBLIC_SITE_URL="http://localhost:3000"\nNEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=""\n',
				type: 'registry:example',
				target: '~/.env.example',
			},
			{
				path: './.gitignore',
				content:
					'# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# dependencies\n/node_modules\n/.pnp\n.pnp.js\n.yarn/install-state.gz\n\n# testing\n/coverage\n\n# next.js\n/.next/\n/out/\n\n# production\n/build\n\n# misc\n.DS_Store\n*.pem\n\n# debug\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# local env files\n.env*.local\n.env\n\n# vercel\n.vercel\n\n# typescript\n*.tsbuildinfo\nnext-env.d.ts\n',
				type: 'registry:example',
				target: '~/.gitignore',
			},
			{
				path: './actions/auth.ts',
				content:
					"'use server'\n\nimport { signIn, signOut } from '@/lib/auth'\nimport prisma from '@/lib/db'\nimport { loginSchema, registerSchema, verifyEmailSchema } from '@/validators/auth'\nimport { getErrorRedirect, getSuccessRedirect, parseFormData } from '@cgambrell/utils'\nimport { Prisma } from '@prisma/client'\nimport bcrypt from 'bcryptjs'\nimport { AuthError } from 'next-auth'\nimport { BuiltInProviderType } from 'next-auth/providers'\nimport { redirect } from 'next/navigation'\n\nexport async function login(_prevState: unknown, formData: FormData) {\n\tconst { data, errors } = parseFormData(formData, loginSchema)\n\tif (errors) return { errors }\n\n\ttry {\n\t\tawait signIn('credentials', { email: data.email, password: data.password, redirectTo: '/' })\n\t} catch (error) {\n\t\tif (error instanceof AuthError) redirect(getErrorRedirect('/login', error.cause?.err?.message))\n\t\tthrow error\n\t}\n}\n\nexport async function logout() {\n\tawait signOut({ redirectTo: '/login' })\n}\n\nexport async function oauth(provider: BuiltInProviderType) {\n\ttry {\n\t\tawait signIn(provider, { redirectTo: '/' })\n\t} catch (error) {\n\t\tif (error instanceof AuthError) redirect(getErrorRedirect('/login', error.cause?.err?.message))\n\t\tthrow error\n\t}\n}\n\nexport async function register(_prevState: unknown, formData: FormData) {\n\tconst { data, errors } = parseFormData(formData, registerSchema)\n\tif (errors) return { errors }\n\n\ttry {\n\t\tconst passwordHash = await bcrypt.hash(data.password, 10)\n\t\tawait prisma.user.create({ data: { name: `${data.firstName} ${data.lastName}`, email: data.email, passwordHash } })\n\t} catch (error) {\n\t\tif (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2002')\n\t\t\treturn { errors: { email: ['User already exists with that email'] } }\n\t\telse if (error instanceof AuthError) redirect(getErrorRedirect('/register', error.cause?.err?.message))\n\t\tthrow error\n\t}\n\n\tredirect(getSuccessRedirect('/login', 'Account created, please login'))\n}\n\nexport async function verifyEmail(_prevState: unknown, formData: FormData) {\n\tconst { data, errors } = parseFormData(formData, verifyEmailSchema)\n\tif (errors) return { errors }\n\n\ttry {\n\t\tawait signIn('resend', { email: data.email, redirect: false })\n\t} catch (error) {\n\t\tif (error instanceof AuthError) redirect(getErrorRedirect('/forgot', error.cause?.err?.message))\n\t\tthrow error\n\t}\n\n\tredirect(getSuccessRedirect('/login', 'A sign in link has been sent to your email address.'))\n}\n",
				type: 'registry:example',
				target: '~/actions/auth.ts',
			},
			{
				path: './actions/stripe.ts',
				content:
					"'use server'\n\nimport { auth } from '@/lib/auth'\nimport prisma from '@/lib/db'\nimport { calculateTrialEndUnixTimestamp, stripe, toDateTime } from '@/lib/stripe/utils'\nimport { getErrorRedirect, getURL } from '@cgambrell/utils'\nimport { Price, Prisma } from '@prisma/client'\nimport { redirect } from 'next/navigation'\nimport Stripe from 'stripe'\n\nconst TRIAL_PERIOD_DAYS = 0\n\ntype CheckoutResponse = {\n\terrorRedirect?: string\n\tsessionId?: string\n}\n\nexport async function createStripePortal(currentPath: string) {\n\tlet redir = null\n\n\ttry {\n\t\tconst user = await auth()\n\n\t\tlet customer\n\t\ttry {\n\t\t\tcustomer = await createOrRetrieveCustomer({\n\t\t\t\tuuid: user.id || '',\n\t\t\t\temail: user.email || '',\n\t\t\t})\n\t\t} catch (err) {\n\t\t\tconsole.error(err)\n\t\t\tthrow new Error('Unable to access customer record.')\n\t\t}\n\n\t\tif (!customer) throw new Error('Could not get customer.')\n\n\t\ttry {\n\t\t\tconst { url } = await stripe.billingPortal.sessions.create({\n\t\t\t\tcustomer,\n\t\t\t\treturn_url: getURL(currentPath),\n\t\t\t})\n\t\t\tif (!url) throw new Error('Could not create billing portal')\n\n\t\t\tredir = url\n\t\t} catch (err) {\n\t\t\tconsole.error(err)\n\t\t\tthrow new Error('Could not create billing portal')\n\t\t}\n\t} catch (error) {\n\t\tif (error instanceof Error) {\n\t\t\tconsole.error(error)\n\t\t\tredir = getErrorRedirect(currentPath, error.message)\n\t\t} else redir = getErrorRedirect(currentPath, 'An unknown error occurred.')\n\t}\n\n\tredirect(redir)\n}\n\nexport async function checkoutWithStripe(priceId: Price['id'], redirectPath: string): Promise<CheckoutResponse> {\n\tconst price = await prisma.price.findUnique({ where: { id: priceId } })\n\tif (!price) throw new Error('Price not found.')\n\n\ttry {\n\t\tconst user = await auth()\n\t\tif (!user) throw new Error('Could not get user session.')\n\n\t\t// Retrieve or create the customer in Stripe\n\t\tlet customer: string\n\t\ttry {\n\t\t\tcustomer = await createOrRetrieveCustomer({\n\t\t\t\tuuid: user?.id || '',\n\t\t\t\temail: user?.email || '',\n\t\t\t})\n\t\t} catch (err) {\n\t\t\tconsole.error(err)\n\t\t\tthrow new Error('Unable to access customer record.')\n\t\t}\n\n\t\tlet params: Stripe.Checkout.SessionCreateParams = {\n\t\t\tallow_promotion_codes: true,\n\t\t\tbilling_address_collection: 'required',\n\t\t\tcustomer,\n\t\t\tcustomer_update: {\n\t\t\t\taddress: 'auto',\n\t\t\t},\n\t\t\tline_items: [\n\t\t\t\t{\n\t\t\t\t\tprice: price.id,\n\t\t\t\t\tquantity: 1,\n\t\t\t\t},\n\t\t\t],\n\t\t\tcancel_url: getURL(redirectPath),\n\t\t\tsuccess_url: getURL(redirectPath),\n\t\t}\n\n\t\tconsole.log('Trial end:', calculateTrialEndUnixTimestamp(price.trialPeriodDays))\n\t\tif (price.type === 'recurring') {\n\t\t\tparams = {\n\t\t\t\t...params,\n\t\t\t\tmode: 'subscription',\n\t\t\t\tsubscription_data: {\n\t\t\t\t\ttrial_end: calculateTrialEndUnixTimestamp(price.trialPeriodDays),\n\t\t\t\t},\n\t\t\t}\n\t\t} else if (price.type === 'one_time') {\n\t\t\tparams = {\n\t\t\t\t...params,\n\t\t\t\tmode: 'payment',\n\t\t\t}\n\t\t}\n\n\t\t// Create a checkout session in Stripe\n\t\tlet session\n\t\ttry {\n\t\t\tsession = await stripe.checkout.sessions.create(params)\n\t\t} catch (err) {\n\t\t\tconsole.error(err)\n\t\t\tthrow new Error('Unable to create checkout session.')\n\t\t}\n\n\t\t// Instead of returning a Response, just return the data or error.\n\t\tif (session) return { sessionId: session.id }\n\t\telse throw new Error('Unable to create checkout session.')\n\t} catch (error) {\n\t\tif (error instanceof Error)\n\t\t\treturn {\n\t\t\t\terrorRedirect: getErrorRedirect(redirectPath, error.message),\n\t\t\t}\n\t\telse\n\t\t\treturn {\n\t\t\t\terrorRedirect: getErrorRedirect(redirectPath, 'An unknown error occurred.'),\n\t\t\t}\n\t}\n}\n\nconst upsertProductRecord = async (product: Stripe.Product) => {\n\tconst productData: Prisma.ProductCreateInput = {\n\t\tid: product.id,\n\t\tactive: product.active,\n\t\tname: product.name,\n\t\tdesc: product.description ?? null,\n\t\timage: product.images?.[0] ?? null,\n\t\tmetadata: product.metadata,\n\t\tfeatures: product.marketing_features.map((feature) => feature.name) as string[],\n\t}\n\n\tawait prisma.product.upsert({ where: { id: productData.id }, create: productData, update: productData })\n\tconsole.log(`Product inserted/updated: ${product.id}`)\n}\n\nconst upsertPriceRecord = async (price: Stripe.Price) => {\n\tconst priceData: Prisma.PriceCreateInput = {\n\t\tid: price.id,\n\t\tproduct: { connect: { id: typeof price.product === 'string' ? price.product : '' } },\n\t\tactive: price.active,\n\t\tcurrency: price.currency,\n\t\ttype: price.type,\n\t\tunitAmount: price.unit_amount ?? null,\n\t\tinterval: price.recurring?.interval ?? null,\n\t\tintervalCount: price.recurring?.interval_count ?? null,\n\t\ttrialPeriodDays: price.recurring?.trial_period_days ?? TRIAL_PERIOD_DAYS,\n\t}\n\n\tawait prisma.price.upsert({ where: { id: priceData.id }, create: priceData, update: priceData })\n\tconsole.log(`Price inserted/updated: ${price.id}`)\n}\n\nconst deleteProductRecord = async (product: Stripe.Product) => {\n\tawait prisma.product.delete({ where: { id: product.id } })\n\tconsole.log(`Product deleted: ${product.id}`)\n}\n\nconst deletePriceRecord = async (price: Stripe.Price) => {\n\tawait prisma.price.delete({ where: { id: price.id } })\n\tconsole.log(`Price deleted: ${price.id}`)\n}\n\nconst upsertCustomerToSupabase = async (uuid: string, customerId: string) => {\n\t// const { error: upsertError } = await supabaseAdmin.from('customers').upsert([{ id: uuid, stripe_customer_id: customerId }])\n\tawait prisma.customer.upsert({\n\t\twhere: { id: uuid },\n\t\tcreate: { id: uuid, stripeCustomerId: customerId },\n\t\tupdate: { id: uuid, stripeCustomerId: customerId },\n\t})\n\treturn customerId\n}\n\nconst createCustomerInStripe = async (uuid: string, email: string) => {\n\tconst customerData = { metadata: { supabaseUUID: uuid }, email: email }\n\tconst newCustomer = await stripe.customers.create(customerData)\n\tif (!newCustomer) throw new Error('Stripe customer creation failed.')\n\n\treturn newCustomer.id\n}\n\nconst createOrRetrieveCustomer = async ({ email, uuid }: { email: string; uuid: string }) => {\n\t// Check if the customer already exists in db\n\tconst existingCustomer = await prisma.customer.findUnique({ where: { id: uuid } })\n\n\t// Retrieve the Stripe customer ID using the db customer ID, with email fallback\n\tlet stripeCustomerId: string | undefined\n\tif (existingCustomer?.stripeCustomerId) {\n\t\tconst existingStripeCustomer = await stripe.customers.retrieve(existingCustomer.stripeCustomerId)\n\t\tstripeCustomerId = existingStripeCustomer.id\n\t} else {\n\t\t// If Stripe ID is missing from db, try to retrieve Stripe customer ID by email\n\t\tconst stripeCustomers = await stripe.customers.list({ email: email })\n\t\tstripeCustomerId = stripeCustomers.data.length ? stripeCustomers.data[0].id : undefined\n\t}\n\n\t// If still no stripeCustomerId, create a new customer in Stripe\n\tconst stripeIdToInsert = stripeCustomerId ? stripeCustomerId : await createCustomerInStripe(uuid, email)\n\tif (!stripeIdToInsert) throw new Error('Stripe customer creation failed.')\n\n\tif (existingCustomer && stripeCustomerId) {\n\t\t// If db has a record but doesn't match Stripe, update db record\n\t\tif (existingCustomer.stripeCustomerId !== stripeCustomerId) {\n\t\t\tawait prisma.customer.update({ where: { id: uuid }, data: { stripeCustomerId } })\n\t\t\tconsole.warn('Db customer record mismatched Stripe ID. db record updated.')\n\t\t}\n\t\t// If db has a record and matches Stripe, return Stripe customer ID\n\t\treturn stripeCustomerId\n\t} else {\n\t\tconsole.warn('Db customer record was missing. A new record was created.')\n\n\t\t// If db has no record, create a new record and return Stripe customer ID\n\t\tconst upsertedStripeCustomer = await upsertCustomerToSupabase(uuid, stripeIdToInsert)\n\t\tif (!upsertedStripeCustomer) throw new Error('Db customer record creation failed.')\n\n\t\treturn upsertedStripeCustomer\n\t}\n}\n\n/**\n * Copies the billing details from the payment method to the customer object.\n */\nconst copyBillingDetailsToCustomer = async (uuid: string, payment_method: Stripe.PaymentMethod) => {\n\tconst customer = payment_method.customer as string\n\tconst { name, phone, address } = payment_method.billing_details\n\tif (!name || !phone || !address) return\n\n\t// @ts-expect-error there is an issue with the stripe address\n\tawait stripe.customers.update(customer, { name, phone, address })\n\tawait prisma.user.update({\n\t\twhere: { id: uuid },\n\t\tdata: { billingAddress: { ...address }, paymentMethod: { ...(payment_method[payment_method.type] ?? undefined) } },\n\t})\n}\n\nconst manageSubscriptionStatusChange = async (subscriptionId: string, customerId: string, createAction = false) => {\n\t// Get customer's UUID from mapping table.\n\tconst customerData = await prisma.customer.findUnique({ where: { stripeCustomerId: customerId } })\n\tconst { id: uuid } = customerData!\n\n\tconst subscription = await stripe.subscriptions.retrieve(subscriptionId, {\n\t\texpand: ['default_payment_method'],\n\t})\n\n\t// Upsert the latest status of the subscription object.\n\tconst subscriptionData: Prisma.SubscriptionCreateInput = {\n\t\tid: subscription.id,\n\t\tuser: { connect: { id: uuid } },\n\t\tmetadata: subscription.metadata,\n\t\tstatus: subscription.status,\n\t\tprice: { connect: { id: subscription.items.data[0].price.id } },\n\t\t// @ts-expect-error there is an issue with the stripe quantity\n\t\tquantity: subscription.quantity,\n\t\tcancelAtPeriodEnd: subscription.cancel_at_period_end,\n\t\tcancelAt: subscription.cancel_at ? toDateTime(subscription.cancel_at).toISOString() : null,\n\t\tcanceledAt: subscription.canceled_at ? toDateTime(subscription.canceled_at).toISOString() : null,\n\t\tcurrentPeriodStart: toDateTime(subscription.current_period_start).toISOString(),\n\t\tcurrentPeriodEnd: toDateTime(subscription.current_period_end).toISOString(),\n\t\tcreated: toDateTime(subscription.created).toISOString(),\n\t\tendedAt: subscription.ended_at ? toDateTime(subscription.ended_at).toISOString() : null,\n\t\ttrialStart: subscription.trial_start ? toDateTime(subscription.trial_start).toISOString() : null,\n\t\ttrialEnd: subscription.trial_end ? toDateTime(subscription.trial_end).toISOString() : null,\n\t}\n\n\tawait prisma.subscription.upsert({ where: { id: subscriptionData.id }, create: subscriptionData, update: subscriptionData })\n\tconsole.log(`Inserted/updated subscription [${subscription.id}] for user [${uuid}]`)\n\n\t// For a new subscription copy the billing details to the customer object.\n\t// NOTE: This is a costly operation and should happen at the very end.\n\tif (createAction && subscription.default_payment_method && uuid)\n\t\tawait copyBillingDetailsToCustomer(uuid, subscription.default_payment_method as Stripe.PaymentMethod)\n}\n\nexport {\n\tcreateOrRetrieveCustomer,\n\tdeletePriceRecord,\n\tdeleteProductRecord,\n\tmanageSubscriptionStatusChange,\n\tupsertPriceRecord,\n\tupsertProductRecord,\n}\n",
				type: 'registry:example',
				target: '~/actions/stripe.ts',
			},
			{
				path: './actions/user.ts',
				content:
					"'use server'\n\nimport { auth } from '@/lib/auth'\nimport prisma from '@/lib/db'\nimport { updatePasswordSchema, updateUserSchema } from '@/validators/user'\nimport { getSuccessRedirect, parseFormData } from '@cgambrell/utils'\nimport bcrypt from 'bcryptjs'\nimport { redirect } from 'next/navigation'\n\nexport async function updateName(_prevState: unknown, formData: FormData) {\n\tconst { data, errors } = parseFormData(formData, updateUserSchema)\n\tif (errors) return { errors }\n\n\tconst user = await auth()\n\tawait prisma.user.update({ where: { id: user.id }, data: { name: data.name } })\n\n\tredirect(getSuccessRedirect('/settings', 'User updated'))\n}\n\nexport async function updatePassword(_prevState: unknown, formData: FormData) {\n\tconst { data, errors } = parseFormData(formData, updatePasswordSchema)\n\tif (errors) return { errors }\n\n\tconst user = await auth()\n\tconst passwordHash = await bcrypt.hash(data.password, 10)\n\tawait prisma.user.update({ where: { id: user.id }, data: { passwordHash } })\n\n\tredirect(getSuccessRedirect('/settings', 'Password updated'))\n}\n",
				type: 'registry:example',
				target: '~/actions/user.ts',
			},
			{
				path: './app/(auth)/forgot/client.tsx',
				content:
					"'use client'\n\nimport { verifyEmail } from '@/actions/auth'\nimport { ActionButton } from '@/components/action-button'\nimport { FormInput } from '@/components/form-input'\nimport { useFormState } from 'react-dom'\n\nexport function ClientPage() {\n\tconst [state, action] = useFormState(verifyEmail, null)\n\n\treturn (\n\t\t<form action={action} className='grid gap-4'>\n\t\t\t<FormInput label='Email address' name='email' placeholder='name@example.com' type='email' error={state?.errors.email} />\n\t\t\t<ActionButton>Send magic link</ActionButton>\n\t\t</form>\n\t)\n}\n",
				type: 'registry:example',
				target: './app/(auth)/forgot/client.tsx',
			},
			{
				path: './app/(auth)/forgot/page.tsx',
				content:
					"import { buttonVariants } from '@/components/ui/button'\nimport { cn } from '@/lib/utils'\nimport Link from 'next/link'\nimport { ClientPage } from './client'\n\nexport default function ForgotPage() {\n\treturn (\n\t\t<>\n\t\t\t<Link className={cn(buttonVariants({ variant: 'ghost' }), 'absolute right-4 top-4 md:right-8 md:top-8')} href='/login'>\n\t\t\t\tLogin\n\t\t\t</Link>\n\t\t\t<div className='mx-auto flex w-full flex-col justify-center space-y-6 sm:w-[350px]'>\n\t\t\t\t<div className='flex flex-col space-y-2 text-center'>\n\t\t\t\t\t<h1 className='text-2xl font-semibold tracking-tight'>Forgot your password?</h1>\n\t\t\t\t\t<p className='text-sm text-muted-foreground'>Enter your email below to get a magic link.</p>\n\t\t\t\t</div>\n\t\t\t\t<ClientPage />\n\t\t\t</div>\n\t\t</>\n\t)\n}\n",
				type: 'registry:example',
				target: './app/(auth)/forgot/page.tsx',
			},
			{
				path: './app/(auth)/layout.tsx',
				content:
					"import { MOCK_APP_ICON, MOCK_APP_NAME, MOCK_TESTIMONIAL, PLACEHOLDER_IMAGE } from '@/lib/constants'\nimport { LayoutProps } from '@cgambrell/utils'\nimport Image from 'next/image'\n\nexport default function AuthLayout({ children }: LayoutProps) {\n\treturn (\n\t\t<div className='relative flex-col items-center justify-center grid lg:max-w-none lg:h-screen lg:grid-cols-2 lg:px-0'>\n\t\t\t<div className='relative hidden h-full flex-col bg-muted p-10 text-white dark:border-r lg:flex'>\n\t\t\t\t<div className='absolute inset-0'>\n\t\t\t\t\t<Image className='w-full h-full object-cover' src={PLACEHOLDER_IMAGE} alt='auth-feature' width={1000} height={1000} />\n\t\t\t\t</div>\n\t\t\t\t<div className='relative z-20 flex items-center text-lg font-medium'>\n\t\t\t\t\t<MOCK_APP_ICON className='mr-2 h-6 w-6' />\n\t\t\t\t\t<span>{MOCK_APP_NAME}</span>\n\t\t\t\t</div>\n\t\t\t\t<div className='relative z-20 mt-auto'>\n\t\t\t\t\t<blockquote className='space-y-2'>\n\t\t\t\t\t\t<p className='text-lg'>&ldquo;{MOCK_TESTIMONIAL.quote}&rdquo;</p>\n\t\t\t\t\t\t<footer className='text-sm'>{MOCK_TESTIMONIAL.name}</footer>\n\t\t\t\t\t</blockquote>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className='px-4 pt-24 lg:p-8'>{children}</div>\n\t\t</div>\n\t)\n}\n",
				type: 'registry:example',
				target: './app/(auth)/layout.tsx',
			},
			{
				path: './app/(auth)/login/client.tsx',
				content:
					"'use client'\n\nimport { login, oauth } from '@/actions/auth'\nimport { ActionButton } from '@/components/action-button'\nimport { FormInput } from '@/components/form-input'\nimport { useFormState } from 'react-dom'\n\nexport function ClientPage() {\n\tconst [state, action] = useFormState(login, null)\n\n\treturn (\n\t\t<form action={action} className='grid gap-4'>\n\t\t\t<FormInput label='Email address' name='email' placeholder='name@example.com' type='email' error={state?.errors.email} />\n\t\t\t<FormInput label='Password' name='password' type='password' error={state?.errors.password} />\n\t\t\t<ActionButton>Sign in with email</ActionButton>\n\n\t\t\t<div className='relative'>\n\t\t\t\t<div className='absolute inset-0 flex items-center'>\n\t\t\t\t\t<span className='w-full border-t' />\n\t\t\t\t</div>\n\t\t\t\t<div className='relative flex justify-center text-xs uppercase'>\n\t\t\t\t\t<span className='bg-background px-2 text-muted-foreground'>Or continue with</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className='grid gap-2'>\n\t\t\t\t<ActionButton formAction={oauth.bind(null, 'google')} variant='outline'>\n\t\t\t\t\tLogin with Google\n\t\t\t\t</ActionButton>\n\t\t\t\t<ActionButton formAction={oauth.bind(null, 'github')} variant='outline'>\n\t\t\t\t\tLogin with Github\n\t\t\t\t</ActionButton>\n\t\t\t</div>\n\t\t</form>\n\t)\n}\n",
				type: 'registry:example',
				target: './app/(auth)/login/client.tsx',
			},
			{
				path: './app/(auth)/login/page.tsx',
				content:
					"import { buttonVariants } from '@/components/ui/button'\nimport { cn } from '@/lib/utils'\nimport { Metadata } from 'next'\nimport Link from 'next/link'\nimport { ClientPage } from './client'\n\nexport const metadata: Metadata = {\n\ttitle: 'Login',\n\tdescription: 'Login to your account',\n}\n\nexport default function LoginPage() {\n\treturn (\n\t\t<>\n\t\t\t<Link className={cn(buttonVariants({ variant: 'ghost' }), 'absolute right-4 top-4 md:right-8 md:top-8')} href='/register'>\n\t\t\t\tRegister\n\t\t\t</Link>\n\t\t\t<div className='mx-auto flex w-full flex-col justify-center space-y-6 sm:w-[350px]'>\n\t\t\t\t<div className='flex flex-col space-y-2 text-center'>\n\t\t\t\t\t<h1 className='text-2xl font-semibold tracking-tight'>Sign in to your account</h1>\n\t\t\t\t\t<p className='text-sm text-muted-foreground'>Enter your email below to sign in to your account</p>\n\t\t\t\t</div>\n\t\t\t\t<ClientPage />\n\t\t\t\t<p className='px-8 text-center text-sm text-muted-foreground'>\n\t\t\t\t\tForgot your password?{' '}\n\t\t\t\t\t<Link className='underline underline-offset-4 hover:text-primary' href='/forgot'>\n\t\t\t\t\t\tGet help\n\t\t\t\t\t</Link>\n\t\t\t\t\t.\n\t\t\t\t</p>\n\t\t\t\t<p className='px-8 text-center text-sm text-muted-foreground'>\n\t\t\t\t\tBy clicking continue, you agree to our{' '}\n\t\t\t\t\t<Link className='underline underline-offset-4 hover:text-primary' href='/terms'>\n\t\t\t\t\t\tTerms of Service\n\t\t\t\t\t</Link>{' '}\n\t\t\t\t\tand{' '}\n\t\t\t\t\t<Link className='underline underline-offset-4 hover:text-primary' href='/privacy'>\n\t\t\t\t\t\tPrivacy Policy\n\t\t\t\t\t</Link>\n\t\t\t\t\t.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</>\n\t)\n}\n",
				type: 'registry:example',
				target: './app/(auth)/login/page.tsx',
			},
			{
				path: './app/(auth)/register/client.tsx',
				content:
					"'use client'\n\nimport { oauth, register } from '@/actions/auth'\nimport { ActionButton } from '@/components/action-button'\nimport { FormInput } from '@/components/form-input'\nimport { useFormState } from 'react-dom'\n\nexport function ClientPage() {\n\tconst [state, action] = useFormState(register, null)\n\n\treturn (\n\t\t<form action={action} className='grid gap-y-4 gap-x-2 grid-cols-2'>\n\t\t\t<FormInput label='First name' name='firstName' placeholder='Max' error={state?.errors.firstName} />\n\t\t\t<FormInput label='Last name' name='lastName' placeholder='Robinson' error={state?.errors.lastName} />\n\t\t\t<FormInput\n\t\t\t\tclassName='col-span-full'\n\t\t\t\tlabel='Email address'\n\t\t\t\tname='email'\n\t\t\t\tplaceholder='name@example.com'\n\t\t\t\ttype='email'\n\t\t\t\terror={state?.errors.email}\n\t\t\t/>\n\t\t\t<FormInput label='Password' name='password' type='password' error={state?.errors.password} />\n\t\t\t<FormInput label='Confirm password' name='confirmPassword' type='password' error={state?.errors.confirmPassword} />\n\t\t\t<ActionButton className='col-span-full'>Create account with email</ActionButton>\n\n\t\t\t<div className='relative col-span-full'>\n\t\t\t\t<div className='absolute inset-0 flex items-center'>\n\t\t\t\t\t<span className='w-full border-t' />\n\t\t\t\t</div>\n\t\t\t\t<div className='relative flex justify-center text-xs uppercase'>\n\t\t\t\t\t<span className='bg-background px-2 text-muted-foreground'>Or continue with</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className='grid gap-2 col-span-full'>\n\t\t\t\t<ActionButton formAction={oauth.bind(null, 'google')} variant='outline'>\n\t\t\t\t\tLogin with Google\n\t\t\t\t</ActionButton>\n\t\t\t\t<ActionButton formAction={oauth.bind(null, 'github')} variant='outline'>\n\t\t\t\t\tLogin with Github\n\t\t\t\t</ActionButton>\n\t\t\t</div>\n\t\t</form>\n\t)\n}\n",
				type: 'registry:example',
				target: './app/(auth)/register/client.tsx',
			},
			{
				path: './app/(auth)/register/page.tsx',
				content:
					"import { buttonVariants } from '@/components/ui/button'\nimport { cn } from '@/lib/utils'\nimport { Metadata } from 'next'\nimport Link from 'next/link'\nimport { ClientPage } from './client'\n\nexport const metadata: Metadata = {\n\ttitle: 'Register',\n\tdescription: 'Create an account',\n}\n\nexport default function RegisterPage() {\n\treturn (\n\t\t<>\n\t\t\t<Link className={cn(buttonVariants({ variant: 'ghost' }), 'absolute right-4 top-4 md:right-8 md:top-8')} href='/login'>\n\t\t\t\tLogin\n\t\t\t</Link>\n\t\t\t<div className='mx-auto flex w-full flex-col justify-center space-y-6 sm:w-[350px]'>\n\t\t\t\t<div className='flex flex-col space-y-2 text-center'>\n\t\t\t\t\t<h1 className='text-2xl font-semibold tracking-tight'>Create an account</h1>\n\t\t\t\t\t<p className='text-sm text-muted-foreground'>Enter your email below to create your account</p>\n\t\t\t\t</div>\n\t\t\t\t<ClientPage />\n\t\t\t\t<p className='px-8 text-center text-sm text-muted-foreground'>\n\t\t\t\t\tBy clicking continue, you agree to our{' '}\n\t\t\t\t\t<Link className='underline underline-offset-4 hover:text-primary' href='/terms'>\n\t\t\t\t\t\tTerms of Service\n\t\t\t\t\t</Link>{' '}\n\t\t\t\t\tand{' '}\n\t\t\t\t\t<Link className='underline underline-offset-4 hover:text-primary' href='/privacy'>\n\t\t\t\t\t\tPrivacy Policy\n\t\t\t\t\t</Link>\n\t\t\t\t\t.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</>\n\t)\n}\n",
				type: 'registry:example',
				target: './app/(auth)/register/page.tsx',
			},
			{
				path: './app/(protected)/components/header.tsx',
				content:
					"import {\n\tDropdownMenu,\n\tDropdownMenuContent,\n\tDropdownMenuItem,\n\tDropdownMenuLabel,\n\tDropdownMenuSeparator,\n\tDropdownMenuShortcut,\n\tDropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport { SidebarHeader, SidebarMenu, SidebarMenuButton, SidebarMenuItem } from '@/components/ui/sidebar'\nimport { MOCK_APP_ICON, MOCK_APP_NAME } from '@/lib/constants'\nimport { AuthUser } from '@/lib/utils'\nimport { ChevronsUpDownIcon, PlusIcon } from 'lucide-react'\n\nexport function Header({ user }: { user: AuthUser }) {\n\treturn (\n\t\t<SidebarHeader>\n\t\t\t<SidebarMenu>\n\t\t\t\t<SidebarMenuItem>\n\t\t\t\t\t<DropdownMenu>\n\t\t\t\t\t\t<DropdownMenuTrigger asChild>\n\t\t\t\t\t\t\t<SidebarMenuButton\n\t\t\t\t\t\t\t\tsize='lg'\n\t\t\t\t\t\t\t\tclassName='data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground'>\n\t\t\t\t\t\t\t\t<div className='flex aspect-square size-8 items-center justify-center rounded-lg bg-sidebar-primary text-sidebar-primary-foreground'>\n\t\t\t\t\t\t\t\t\t<MOCK_APP_ICON className='size-4' />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className='grid flex-1 text-left text-sm leading-tight'>\n\t\t\t\t\t\t\t\t\t<span className='truncate font-semibold'>{MOCK_APP_NAME}</span>\n\t\t\t\t\t\t\t\t\t<span className='truncate text-xs'>{user.subscriptions[0]?.price?.product?.name ?? 'Free'}</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<ChevronsUpDownIcon className='ml-auto' />\n\t\t\t\t\t\t\t</SidebarMenuButton>\n\t\t\t\t\t\t</DropdownMenuTrigger>\n\t\t\t\t\t\t{/* TODO: User real team data */}\n\t\t\t\t\t\t<DropdownMenuContent\n\t\t\t\t\t\t\tclassName='w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg'\n\t\t\t\t\t\t\talign='start'\n\t\t\t\t\t\t\tside='bottom'\n\t\t\t\t\t\t\tsideOffset={4}>\n\t\t\t\t\t\t\t<DropdownMenuLabel className='text-xs text-muted-foreground'>Teams</DropdownMenuLabel>\n\t\t\t\t\t\t\t<DropdownMenuItem className='gap-2 p-2'>\n\t\t\t\t\t\t\t\t<div className='flex size-6 items-center justify-center rounded-sm border'>\n\t\t\t\t\t\t\t\t\t<MOCK_APP_ICON className='size-4 shrink-0' />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t{MOCK_APP_NAME}\n\t\t\t\t\t\t\t\t<DropdownMenuShortcut>⌘1</DropdownMenuShortcut>\n\t\t\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t\t\t<DropdownMenuSeparator />\n\t\t\t\t\t\t\t<DropdownMenuItem className='gap-2 p-2'>\n\t\t\t\t\t\t\t\t<div className='flex size-6 items-center justify-center rounded-md border bg-background'>\n\t\t\t\t\t\t\t\t\t<PlusIcon className='size-4' />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className='font-medium text-muted-foreground'>Add team</div>\n\t\t\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t\t</DropdownMenuContent>\n\t\t\t\t\t</DropdownMenu>\n\t\t\t\t</SidebarMenuItem>\n\t\t\t</SidebarMenu>\n\t\t</SidebarHeader>\n\t)\n}\n",
				type: 'registry:example',
				target: './app/(protected)/components/header.tsx',
			},
			{
				path: './app/(protected)/components/links.tsx',
				content:
					"'use client'\n\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible'\nimport {\n\tDropdownMenu,\n\tDropdownMenuContent,\n\tDropdownMenuItem,\n\tDropdownMenuSeparator,\n\tDropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport {\n\tSidebarContent,\n\tSidebarGroup,\n\tSidebarGroupContent,\n\tSidebarGroupLabel,\n\tSidebarMenu,\n\tSidebarMenuAction,\n\tSidebarMenuButton,\n\tSidebarMenuItem,\n\tSidebarMenuSub,\n\tSidebarMenuSubButton,\n\tSidebarMenuSubItem,\n} from '@/components/ui/sidebar'\nimport { cn } from '@/lib/utils'\nimport {\n\tBotIcon,\n\tChevronRightIcon,\n\tFolderIcon,\n\tFrameIcon,\n\tLifeBuoyIcon,\n\tLucideIcon,\n\tMapIcon,\n\tMoreHorizontalIcon,\n\tPieChartIcon,\n\tSendIcon,\n\tSettings2Icon,\n\tShareIcon,\n\tSquareTerminalIcon,\n\tTrash2Icon,\n} from 'lucide-react'\nimport Link from 'next/link'\nimport { usePathname } from 'next/navigation'\nimport { ReactNode } from 'react'\n\ntype SubLinkProps = { exact?: boolean; href: string; label: string }\n\ntype LinkProps = {\n\tactions?: ReactNode\n\tdefaultOpen?: boolean\n\texact?: boolean\n\thref: string\n\ticon: LucideIcon\n\tlabel: string\n\tsize?: 'default' | 'sm' | 'lg'\n\tsubLinks?: SubLinkProps[]\n}\n\ntype LinkGroupProps = {\n\tclassName?: string\n\tlabel?: string\n\tlinks: LinkProps[]\n}\n\n// TODO: Real links\nconst linkGroups: LinkGroupProps[] = [\n\t{\n\t\tlabel: 'Platform',\n\t\tlinks: [\n\t\t\t{\n\t\t\t\thref: '#',\n\t\t\t\ticon: SquareTerminalIcon,\n\t\t\t\tlabel: 'Playground',\n\t\t\t\tdefaultOpen: true,\n\t\t\t\tsubLinks: [\n\t\t\t\t\t{ href: '/dashboard', label: 'History' },\n\t\t\t\t\t{ href: '#', label: 'Starred' },\n\t\t\t\t\t{ href: '#', label: 'Settings' },\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\thref: '#',\n\t\t\t\ticon: BotIcon,\n\t\t\t\tlabel: 'Models',\n\t\t\t\tsubLinks: [\n\t\t\t\t\t{ href: '#', label: 'Genesis' },\n\t\t\t\t\t{ href: '#', label: 'Explorer' },\n\t\t\t\t\t{ href: '#', label: 'Quantum' },\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\thref: '#',\n\t\t\t\ticon: Settings2Icon,\n\t\t\t\tlabel: 'Settings',\n\t\t\t\tdefaultOpen: true,\n\t\t\t\tsubLinks: [\n\t\t\t\t\t{ href: '/settings', label: 'General' },\n\t\t\t\t\t{ href: '#', label: 'Team' },\n\t\t\t\t\t{ href: '#', label: 'Billing' },\n\t\t\t\t\t{ href: '#', label: 'Limits' },\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tlabel: 'Projects',\n\t\tlinks: [\n\t\t\t{ href: '#', icon: FrameIcon, label: 'Design Engineering', actions: <Actions /> },\n\t\t\t{ href: '#', icon: PieChartIcon, label: 'Sales & Marketing', actions: <Actions /> },\n\t\t\t{ href: '#', icon: MapIcon, label: 'Travel', actions: <Actions /> },\n\t\t\t{ href: '#', icon: MoreHorizontalIcon, label: 'More' },\n\t\t],\n\t},\n\t{\n\t\tclassName: 'mt-auto',\n\t\tlinks: [\n\t\t\t{ href: '#', icon: LifeBuoyIcon, label: 'Support', size: 'sm' },\n\t\t\t{ href: '#', icon: SendIcon, label: 'Feedback', size: 'sm' },\n\t\t],\n\t},\n]\n\nexport function Links() {\n\tconst pathname = usePathname()\n\n\treturn (\n\t\t<SidebarContent>\n\t\t\t{linkGroups.map((group, g) => (\n\t\t\t\t<SidebarGroup key={g} className={cn(group.className)}>\n\t\t\t\t\t{group.label && <SidebarGroupLabel>{group.label}</SidebarGroupLabel>}\n\t\t\t\t\t{group.links.length > 0 ? (\n\t\t\t\t\t\t<SidebarGroupContent>\n\t\t\t\t\t\t\t<SidebarMenu>\n\t\t\t\t\t\t\t\t{group.links.map((link, l) => (\n\t\t\t\t\t\t\t\t\t<Collapsible\n\t\t\t\t\t\t\t\t\t\tkey={l}\n\t\t\t\t\t\t\t\t\t\tasChild\n\t\t\t\t\t\t\t\t\t\tdefaultOpen={\n\t\t\t\t\t\t\t\t\t\t\tlink.defaultOpen ||\n\t\t\t\t\t\t\t\t\t\t\tlink.subLinks?.some((subLink) =>\n\t\t\t\t\t\t\t\t\t\t\t\tsubLink.exact ? pathname === subLink.href : pathname.startsWith(subLink.href)\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t\t\t\t<SidebarMenuItem>\n\t\t\t\t\t\t\t\t\t\t\t<SidebarMenuButton\n\t\t\t\t\t\t\t\t\t\t\t\tasChild\n\t\t\t\t\t\t\t\t\t\t\t\tisActive={\n\t\t\t\t\t\t\t\t\t\t\t\t\t!link.subLinks && (link.exact ? pathname === link.href : pathname.startsWith(link.href))\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tsize={link.size}\n\t\t\t\t\t\t\t\t\t\t\t\ttooltip={link.label}>\n\t\t\t\t\t\t\t\t\t\t\t\t<Link href={link.href}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<link.icon />\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{link.label}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t\t\t</SidebarMenuButton>\n\t\t\t\t\t\t\t\t\t\t\t{link.actions && (\n\t\t\t\t\t\t\t\t\t\t\t\t<DropdownMenu>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<DropdownMenuTrigger asChild>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<SidebarMenuAction showOnHover>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<MoreHorizontalIcon />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className='sr-only'>More</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</SidebarMenuAction>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</DropdownMenuTrigger>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<DropdownMenuContent className='w-48' side='bottom' align='end'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{link.actions}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</DropdownMenuContent>\n\t\t\t\t\t\t\t\t\t\t\t\t</DropdownMenu>\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t{link.subLinks?.length ? (\n\t\t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<CollapsibleTrigger asChild>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<SidebarMenuAction className='data-[state=open]:rotate-90'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ChevronRightIcon />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className='sr-only'>Toggle</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</SidebarMenuAction>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</CollapsibleTrigger>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<CollapsibleContent>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<SidebarMenuSub>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{link.subLinks.map((subLink, s) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<SidebarMenuSubItem key={s}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<SidebarMenuSubButton\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tasChild\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisActive={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubLink.exact\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? pathname === subLink.href\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: pathname.startsWith(subLink.href)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Link href={subLink.href}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{subLink.label}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</SidebarMenuSubButton>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</SidebarMenuSubItem>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</SidebarMenuSub>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</CollapsibleContent>\n\t\t\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t\t\t\t</SidebarMenuItem>\n\t\t\t\t\t\t\t\t\t</Collapsible>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</SidebarMenu>\n\t\t\t\t\t\t</SidebarGroupContent>\n\t\t\t\t\t) : null}\n\t\t\t\t</SidebarGroup>\n\t\t\t))}\n\t\t</SidebarContent>\n\t)\n}\n\nfunction Actions() {\n\treturn (\n\t\t<>\n\t\t\t<DropdownMenuItem>\n\t\t\t\t<FolderIcon className='text-muted-foreground' />\n\t\t\t\t<span>View Project</span>\n\t\t\t</DropdownMenuItem>\n\t\t\t<DropdownMenuItem>\n\t\t\t\t<ShareIcon className='text-muted-foreground' />\n\t\t\t\t<span>Share Project</span>\n\t\t\t</DropdownMenuItem>\n\t\t\t<DropdownMenuSeparator />\n\t\t\t<DropdownMenuItem>\n\t\t\t\t<Trash2Icon className='text-muted-foreground' />\n\t\t\t\t<span>Delete Project</span>\n\t\t\t</DropdownMenuItem>\n\t\t</>\n\t)\n}\n",
				type: 'registry:example',
				target: './app/(protected)/components/links.tsx',
			},
			{
				path: './app/(protected)/components/user-menu.tsx',
				content:
					"import { logout } from '@/actions/auth'\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'\nimport {\n\tDropdownMenu,\n\tDropdownMenuContent,\n\tDropdownMenuGroup,\n\tDropdownMenuItem,\n\tDropdownMenuLabel,\n\tDropdownMenuSeparator,\n\tDropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport { SidebarFooter, SidebarMenu, SidebarMenuButton, SidebarMenuItem } from '@/components/ui/sidebar'\nimport { PLACEHOLDER_IMAGE } from '@/lib/constants'\nimport { AuthUser } from '@/lib/utils'\nimport { BadgeCheckIcon, BellIcon, ChevronsUpDownIcon, CreditCardIcon, LogOutIcon, SparklesIcon } from 'lucide-react'\n\nexport function UserMenu({ user }: { user: AuthUser }) {\n\treturn (\n\t\t<SidebarFooter>\n\t\t\t<SidebarMenu>\n\t\t\t\t<SidebarMenuItem>\n\t\t\t\t\t<DropdownMenu>\n\t\t\t\t\t\t<DropdownMenuTrigger asChild>\n\t\t\t\t\t\t\t<SidebarMenuButton\n\t\t\t\t\t\t\t\tsize='lg'\n\t\t\t\t\t\t\t\tclassName='data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground'>\n\t\t\t\t\t\t\t\t<Avatar className='h-8 w-8 rounded-lg'>\n\t\t\t\t\t\t\t\t\t<AvatarImage src={user.image ?? PLACEHOLDER_IMAGE} alt={user.name ?? ''} />\n\t\t\t\t\t\t\t\t\t<AvatarFallback className='rounded-lg'>{user.name?.slice(0, 1).toUpperCase()}</AvatarFallback>\n\t\t\t\t\t\t\t\t</Avatar>\n\t\t\t\t\t\t\t\t<div className='grid flex-1 text-left text-sm leading-tight'>\n\t\t\t\t\t\t\t\t\t<span className='truncate font-semibold'>{user.name}</span>\n\t\t\t\t\t\t\t\t\t<span className='truncate text-xs'>{user.email}</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<ChevronsUpDownIcon className='ml-auto size-4' />\n\t\t\t\t\t\t\t</SidebarMenuButton>\n\t\t\t\t\t\t</DropdownMenuTrigger>\n\t\t\t\t\t\t<DropdownMenuContent\n\t\t\t\t\t\t\tclassName='w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg'\n\t\t\t\t\t\t\tside='bottom'\n\t\t\t\t\t\t\talign='end'\n\t\t\t\t\t\t\tsideOffset={4}>\n\t\t\t\t\t\t\t<DropdownMenuLabel className='p-0 font-normal'>\n\t\t\t\t\t\t\t\t<div className='flex items-center gap-2 px-1 py-1.5 text-left text-sm'>\n\t\t\t\t\t\t\t\t\t<Avatar className='h-8 w-8 rounded-lg'>\n\t\t\t\t\t\t\t\t\t\t<AvatarImage src={user.image ?? PLACEHOLDER_IMAGE} alt={user.name ?? ''} />\n\t\t\t\t\t\t\t\t\t\t<AvatarFallback className='rounded-lg'>{user.name?.slice(0, 1).toUpperCase()}</AvatarFallback>\n\t\t\t\t\t\t\t\t\t</Avatar>\n\t\t\t\t\t\t\t\t\t<div className='grid flex-1 text-left text-sm leading-tight'>\n\t\t\t\t\t\t\t\t\t\t<span className='truncate font-semibold'>{user.name}</span>\n\t\t\t\t\t\t\t\t\t\t<span className='truncate text-xs'>{user.email}</span>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</DropdownMenuLabel>\n\t\t\t\t\t\t\t<DropdownMenuSeparator />\n\t\t\t\t\t\t\t{/* TODO: Real user menu links */}\n\t\t\t\t\t\t\t<DropdownMenuGroup>\n\t\t\t\t\t\t\t\t<DropdownMenuItem>\n\t\t\t\t\t\t\t\t\t<SparklesIcon />\n\t\t\t\t\t\t\t\t\tUpgrade to Pro\n\t\t\t\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t\t\t</DropdownMenuGroup>\n\t\t\t\t\t\t\t<DropdownMenuSeparator />\n\t\t\t\t\t\t\t<DropdownMenuGroup>\n\t\t\t\t\t\t\t\t<DropdownMenuItem>\n\t\t\t\t\t\t\t\t\t<BadgeCheckIcon />\n\t\t\t\t\t\t\t\t\tAccount\n\t\t\t\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t\t\t\t<DropdownMenuItem>\n\t\t\t\t\t\t\t\t\t<CreditCardIcon />\n\t\t\t\t\t\t\t\t\tBilling\n\t\t\t\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t\t\t\t<DropdownMenuItem>\n\t\t\t\t\t\t\t\t\t<BellIcon />\n\t\t\t\t\t\t\t\t\tNotifications\n\t\t\t\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t\t\t</DropdownMenuGroup>\n\t\t\t\t\t\t\t<DropdownMenuSeparator />\n\t\t\t\t\t\t\t<form action={logout}>\n\t\t\t\t\t\t\t\t<DropdownMenuItem asChild>\n\t\t\t\t\t\t\t\t\t<button className='w-full'>\n\t\t\t\t\t\t\t\t\t\t<LogOutIcon />\n\t\t\t\t\t\t\t\t\t\tLog out\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t</DropdownMenuContent>\n\t\t\t\t\t</DropdownMenu>\n\t\t\t\t</SidebarMenuItem>\n\t\t\t</SidebarMenu>\n\t\t</SidebarFooter>\n\t)\n}\n",
				type: 'registry:example',
				target: './app/(protected)/components/user-menu.tsx',
			},
			{
				path: './app/(protected)/dashboard/page.tsx',
				content:
					"import Image from 'next/image'\n\nexport default function Home() {\n\treturn (\n\t\t<div className='grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-full p-8 pb-20 gap-16 sm:p-20 font-[family-name:var(--font-geist-sans)]'>\n\t\t\t<main className='flex flex-col gap-8 row-start-2 items-center sm:items-start'>\n\t\t\t\t<Image\n\t\t\t\t\tclassName='dark:invert'\n\t\t\t\t\tsrc='https://nextjs.org/icons/next.svg'\n\t\t\t\t\talt='Next.js logo'\n\t\t\t\t\twidth={180}\n\t\t\t\t\theight={38}\n\t\t\t\t\tpriority\n\t\t\t\t/>\n\t\t\t\t<ol className='list-inside list-decimal text-sm text-center sm:text-left font-[family-name:var(--font-geist-mono)]'>\n\t\t\t\t\t<li className='mb-2'>\n\t\t\t\t\t\tGet started by editing{' '}\n\t\t\t\t\t\t<code className='bg-black/[.05] dark:bg-white/[.06] px-1 py-0.5 rounded font-semibold'>app/page.tsx</code>.\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>Save and see your changes instantly.</li>\n\t\t\t\t</ol>\n\n\t\t\t\t<div className='flex gap-4 items-center flex-col sm:flex-row'>\n\t\t\t\t\t<a\n\t\t\t\t\t\tclassName='rounded-full border border-solid border-transparent transition-colors flex items-center justify-center bg-foreground text-background gap-2 hover:bg-[#383838] dark:hover:bg-[#ccc] text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5'\n\t\t\t\t\t\thref='https://vercel.com/new?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app'\n\t\t\t\t\t\ttarget='_blank'\n\t\t\t\t\t\trel='noopener noreferrer'>\n\t\t\t\t\t\t<Image\n\t\t\t\t\t\t\tclassName='dark:invert'\n\t\t\t\t\t\t\tsrc='https://nextjs.org/icons/vercel.svg'\n\t\t\t\t\t\t\talt='Vercel logomark'\n\t\t\t\t\t\t\twidth={20}\n\t\t\t\t\t\t\theight={20}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\tDeploy now\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\tclassName='rounded-full border border-solid border-black/[.08] dark:border-white/[.145] transition-colors flex items-center justify-center hover:bg-[#f2f2f2] dark:hover:bg-[#1a1a1a] hover:border-transparent text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5 sm:min-w-44'\n\t\t\t\t\t\thref='https://nextjs.org/docs?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app'\n\t\t\t\t\t\ttarget='_blank'\n\t\t\t\t\t\trel='noopener noreferrer'>\n\t\t\t\t\t\tRead our docs\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</main>\n\t\t\t<footer className='row-start-3 flex gap-6 flex-wrap items-center justify-center'>\n\t\t\t\t<a\n\t\t\t\t\tclassName='flex items-center gap-2 hover:underline hover:underline-offset-4'\n\t\t\t\t\thref='https://nextjs.org/learn?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app'\n\t\t\t\t\ttarget='_blank'\n\t\t\t\t\trel='noopener noreferrer'>\n\t\t\t\t\t<Image aria-hidden src='https://nextjs.org/icons/file.svg' alt='File icon' width={16} height={16} />\n\t\t\t\t\tLearn\n\t\t\t\t</a>\n\t\t\t\t<a\n\t\t\t\t\tclassName='flex items-center gap-2 hover:underline hover:underline-offset-4'\n\t\t\t\t\thref='https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app'\n\t\t\t\t\ttarget='_blank'\n\t\t\t\t\trel='noopener noreferrer'>\n\t\t\t\t\t<Image aria-hidden src='https://nextjs.org/icons/window.svg' alt='Window icon' width={16} height={16} />\n\t\t\t\t\tExamples\n\t\t\t\t</a>\n\t\t\t\t<a\n\t\t\t\t\tclassName='flex items-center gap-2 hover:underline hover:underline-offset-4'\n\t\t\t\t\thref='https://nextjs.org?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app'\n\t\t\t\t\ttarget='_blank'\n\t\t\t\t\trel='noopener noreferrer'>\n\t\t\t\t\t<Image aria-hidden src='https://nextjs.org/icons/globe.svg' alt='Globe icon' width={16} height={16} />\n\t\t\t\t\tGo to nextjs.org →\n\t\t\t\t</a>\n\t\t\t</footer>\n\t\t</div>\n\t)\n}\n",
				type: 'registry:example',
				target: './app/(protected)/dashboard/page.tsx',
			},
			{
				path: './app/(protected)/layout.tsx',
				content:
					"import { Sidebar, SidebarInset, SidebarProvider } from '@/components/ui/sidebar'\nimport { auth } from '@/lib/auth'\nimport { LayoutProps } from '@cgambrell/utils'\nimport { Header } from './components/header'\nimport { Links } from './components/links'\nimport { UserMenu } from './components/user-menu'\n\nexport default async function ProtectedLayout({ children }: LayoutProps) {\n\tconst user = await auth()\n\n\treturn (\n\t\t<SidebarProvider>\n\t\t\t<Sidebar variant='inset'>\n\t\t\t\t<Header user={user} />\n\t\t\t\t<Links />\n\t\t\t\t<UserMenu user={user} />\n\t\t\t</Sidebar>\n\t\t\t<SidebarInset>\n\t\t\t\t<div className='flex flex-1 flex-col gap-4 p-4 pt-10 max-w-4xl mx-auto w-full'>{children}</div>\n\t\t\t</SidebarInset>\n\t\t</SidebarProvider>\n\t)\n}\n",
				type: 'registry:example',
				target: './app/(protected)/layout.tsx',
			},
			{
				path: './app/(protected)/settings/client.tsx',
				content:
					"'use client'\n\nimport { checkoutWithStripe, createStripePortal } from '@/actions/stripe'\nimport { updateName, updatePassword } from '@/actions/user'\nimport { ActionButton } from '@/components/action-button'\nimport { FormInput } from '@/components/form-input'\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Separator } from '@/components/ui/separator'\nimport { Tabs, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { getStripe } from '@/lib/stripe/client'\nimport { AuthUser } from '@/lib/utils'\nimport { getErrorRedirect } from '@cgambrell/utils'\nimport { Price, Prisma } from '@prisma/client'\nimport { useRouter } from 'next/navigation'\nimport { FormEvent, useState } from 'react'\nimport { useFormState } from 'react-dom'\n\nexport function ClientPage({ prices, user }: { prices: Prisma.PriceGetPayload<{ include: { product: true } }>[]; user: AuthUser }) {\n\tconst router = useRouter()\n\tconst [interval, setInterval] = useState<string>('month')\n\tconst [loading, setLoading] = useState(false)\n\tconst [nameState, nameAction] = useFormState(updateName, null)\n\tconst [passwordState, passwordAction] = useFormState(updatePassword, null)\n\n\tasync function handleCheckout(priceId: Price['id'], e: FormEvent) {\n\t\te.preventDefault()\n\t\tsetLoading(true)\n\n\t\tconst res = await checkoutWithStripe(priceId, '/settings')\n\t\tif (res.errorRedirect) return router.push(res.errorRedirect)\n\t\telse if (!res.sessionId) return router.push(getErrorRedirect('/settings', 'Unable to create checkout session.'))\n\n\t\tconst stripe = await getStripe()\n\t\tstripe?.redirectToCheckout({ sessionId: res.sessionId })\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Card>\n\t\t\t\t<CardHeader>\n\t\t\t\t\t<CardTitle>Your plan</CardTitle>\n\t\t\t\t\t<CardDescription>\n\t\t\t\t\t\t{user.subscriptions.length > 0 ? (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\tYou are subscribed to the{' '}\n\t\t\t\t\t\t\t\t<span className='font-bold underline'>{user.subscriptions[0].price?.product?.name}</span> plan.\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t'You are not currently subscribed to any plan.'\n\t\t\t\t\t\t)}\n\t\t\t\t\t</CardDescription>\n\t\t\t\t</CardHeader>\n\t\t\t\t{user.subscriptions.length === 0 ? (\n\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t<div className='grid gap-8'>\n\t\t\t\t\t\t\t<Separator />\n\t\t\t\t\t\t\t<Tabs value={interval} onValueChange={setInterval}>\n\t\t\t\t\t\t\t\t<div className='flex justify-center'>\n\t\t\t\t\t\t\t\t\t<TabsList>\n\t\t\t\t\t\t\t\t\t\t<TabsTrigger value='month'>Monthly</TabsTrigger>\n\t\t\t\t\t\t\t\t\t\t<TabsTrigger value='year'>Yearly</TabsTrigger>\n\t\t\t\t\t\t\t\t\t</TabsList>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className='mt-4 grid grid-cols-3 gap-4'>\n\t\t\t\t\t\t\t\t\t{prices\n\t\t\t\t\t\t\t\t\t\t.filter((price) => price.interval === interval)\n\t\t\t\t\t\t\t\t\t\t.map((price) => (\n\t\t\t\t\t\t\t\t\t\t\t<Card key={price.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<CardHeader>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<CardTitle>{price.product?.name}</CardTitle>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<CardDescription>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t${Number(price.unitAmount) / 100} / {price.interval}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</CardDescription>\n\t\t\t\t\t\t\t\t\t\t\t\t</CardHeader>\n\t\t\t\t\t\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<ul className='list-disc pl-4'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{price.product?.features.map((feature) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<li key={feature}>{feature}</li>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t\t\t\t\t\t\t<CardFooter>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<form onSubmit={handleCheckout.bind(null, price.id)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ActionButton className='w-full' loading={loading}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSubscribe\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ActionButton>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t\t\t\t\t\t</CardFooter>\n\t\t\t\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</Tabs>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</CardContent>\n\t\t\t\t) : (\n\t\t\t\t\t<CardFooter className='border-t px-6 py-4'>\n\t\t\t\t\t\t<form action={createStripePortal.bind(null, '/settings')}>\n\t\t\t\t\t\t\t<ActionButton>Manage subscription</ActionButton>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</CardFooter>\n\t\t\t\t)}\n\t\t\t</Card>\n\t\t\t<form action={nameAction}>\n\t\t\t\t<Card>\n\t\t\t\t\t<CardHeader>\n\t\t\t\t\t\t<CardTitle>Your name</CardTitle>\n\t\t\t\t\t\t<CardDescription>The name you use to identify yourself.</CardDescription>\n\t\t\t\t\t</CardHeader>\n\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t<FormInput\n\t\t\t\t\t\t\tclassName='max-w-md'\n\t\t\t\t\t\t\tname='name'\n\t\t\t\t\t\t\tplaceholder={user.name ?? ''}\n\t\t\t\t\t\t\tdefaultValue={user.name ?? ''}\n\t\t\t\t\t\t\terror={nameState?.errors?.name}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</CardContent>\n\t\t\t\t\t<CardFooter className='border-t px-6 py-4'>\n\t\t\t\t\t\t<ActionButton>Save</ActionButton>\n\t\t\t\t\t</CardFooter>\n\t\t\t\t</Card>\n\t\t\t</form>\n\t\t\t<form action={passwordAction}>\n\t\t\t\t<Card>\n\t\t\t\t\t<CardHeader>\n\t\t\t\t\t\t<CardTitle>Your password</CardTitle>\n\t\t\t\t\t\t<CardDescription>Change your password to something more secure.</CardDescription>\n\t\t\t\t\t</CardHeader>\n\t\t\t\t\t<CardContent className='grid gap-2'>\n\t\t\t\t\t\t<FormInput\n\t\t\t\t\t\t\tclassName='max-w-md'\n\t\t\t\t\t\t\tname='password'\n\t\t\t\t\t\t\tplaceholder='Password'\n\t\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\t\terror={passwordState?.errors?.password}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<FormInput\n\t\t\t\t\t\t\tclassName='max-w-md'\n\t\t\t\t\t\t\tname='confirmPassword'\n\t\t\t\t\t\t\tplaceholder='Confirm password'\n\t\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\t\terror={passwordState?.errors?.confirmPassword}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</CardContent>\n\t\t\t\t\t<CardFooter className='border-t px-6 py-4'>\n\t\t\t\t\t\t<ActionButton>Save</ActionButton>\n\t\t\t\t\t</CardFooter>\n\t\t\t\t</Card>\n\t\t\t</form>\n\t\t</>\n\t)\n}\n",
				type: 'registry:example',
				target: './app/(protected)/settings/client.tsx',
			},
			{
				path: './app/(protected)/settings/page.tsx',
				content:
					"import { auth } from '@/lib/auth'\nimport prisma from '@/lib/db'\nimport { ClientPage } from './client'\n\nexport default async function SettingsPage() {\n\tconst user = await auth()\n\tconst prices = await prisma.price.findMany({ where: { active: true, product: { active: true } }, include: { product: true } })\n\n\treturn (\n\t\t<div className='grid gap-6'>\n\t\t\t<h2 className='text-3xl font-bold'>General Settings</h2>\n\t\t\t<ClientPage prices={prices} user={user} />\n\t\t</div>\n\t)\n}\n",
				type: 'registry:example',
				target: './app/(protected)/settings/page.tsx',
			},
			{
				path: './app/(terms)/constants.ts',
				content:
					"import { MOCK_APP_ICON, MOCK_APP_NAME } from '@/lib/constants'\n\n// TODO: Real terms data\nexport const MOCK_TERMS = {\n\tappName: MOCK_APP_NAME,\n\tappIcon: MOCK_APP_ICON,\n\tarbitration: 'Arbitration',\n\temail: 'me@example.com',\n\tjurisdiction: 'California',\n\tmailingAddress: '1234 Main St, Anytown, USA',\n\tminimumAge: 13,\n\tphone: '(555) 123-4567',\n}\n",
				type: 'registry:example',
				target: './app/(terms)/constants.ts',
			},
			{
				path: './app/(terms)/layout.tsx',
				content:
					"import { LayoutProps } from '@cgambrell/utils'\nimport Link from 'next/link'\nimport { MOCK_TERMS } from './constants'\n\nexport default function TermsLayout({ children }: LayoutProps) {\n\treturn (\n\t\t<div className='mx-auto max-w-screen-md px-4 py-12 prose prose-sm'>\n\t\t\t<Link className='flex items-center text-xl font-medium mb-8' href='/'>\n\t\t\t\t<MOCK_TERMS.appIcon className='mr-2 h-6 w-6' />\n\t\t\t\t<span>{MOCK_TERMS.appName}</span>\n\t\t\t</Link>\n\t\t\t<div>{children}</div>\n\t\t</div>\n\t)\n}\n",
				type: 'registry:example',
				target: './app/(terms)/layout.tsx',
			},
			{
				path: './app/(terms)/privacy/page.mdx',
				content:
					'import { MOCK_TERMS } from \'../constants\'\n\n**Privacy Notice**\n\n_Last Updated: 2024-10-10_\n\n---\n\n**1. Introduction**\n\nWelcome to {MOCK_TERMS.appName} ("we," "us," or "our"). This Privacy Notice describes how we collect, use, disclose, and safeguard your personal information when you use our services, including our website and any related applications (collectively, the "Service").\n\n**2. Information We Collect**\n\n-   **Personal Data:** We may collect personally identifiable information such as your name, email address, phone number, and mailing address when you register for an account, subscribe to a newsletter, or fill out a form.\n\n-   **Usage Data:** We collect information on how you access and use the Service ("Usage Data"). This may include your IP address, browser type, pages visited, time and date of visit, and other diagnostic data.\n\n-   **Cookies and Tracking Technologies:** We use cookies, web beacons, and similar tracking technologies to track the activity on our Service and hold certain information.\n\n**3. How We Use Your Information**\n\nWe use the collected data for various purposes:\n\n-   **To Provide and Maintain the Service:** Ensuring the Service functions correctly and providing customer support.\n\n-   **To Notify You of Changes:** Informing you about updates or changes to our Service.\n\n-   **To Allow Participation in Interactive Features:** Enabling you to participate in interactive features when you choose to do so.\n\n-   **To Monitor Usage:** Tracking and analyzing usage and trends to improve user experience.\n\n-   **To Communicate with You:** Sending newsletters, marketing materials, and other information that may be of interest to you.\n\n**4. Disclosure of Your Information**\n\n-   **Business Transactions:** If we are involved in a merger, acquisition, or asset sale, your personal data may be transferred.\n\n-   **Legal Requirements:** We may disclose your information if required to do so by law or in response to valid requests by public authorities.\n\n-   **Third-Party Service Providers:** We may employ third-party companies to facilitate our Service, perform Service-related services, or assist us in analyzing how our Service is used.\n\n**5. Security of Your Information**\n\nWe value your trust in providing us your personal information and strive to use commercially acceptable means of protecting it. However, no method of transmission over the internet or electronic storage is 100% secure.\n\n**6. Your Rights**\n\nDepending on your jurisdiction, you may have the following data protection rights:\n\n-   **Access:** Request access to the personal data we hold about you.\n\n-   **Correction:** Request correction of any inaccurate or incomplete data.\n\n-   **Deletion:** Request deletion of your personal data under certain circumstances.\n\n-   **Opt-Out:** Opt-out of receiving marketing communications from us.\n\n**7. Children\'s Privacy**\n\nOur Service is not intended for individuals under the age of {MOCK_TERMS.minimumAge}. We do not knowingly collect personally identifiable information from anyone under this age.\n\n**8. International Data Transfers**\n\nYour information, including personal data, may be transferred to—and maintained on—computers located outside of your state, province, country, or other governmental jurisdiction where data protection laws may differ.\n\n**9. Changes to This Privacy Notice**\n\nWe may update our Privacy Notice from time to time. Any changes will be posted on this page with an updated "Last Updated" date.\n\n**10. Contact Us**\n\nIf you have any questions or concerns about this Privacy Notice, please contact us at:\n\n-   **Email:** {MOCK_TERMS.email}\n-   **Mailing Address:** {MOCK_TERMS.mailingAddress}\n-   **Phone Number:** {MOCK_TERMS.phone}\n\n---\n\n_Please customize this Privacy Notice to suit your specific needs and consult with a legal professional to ensure compliance with all applicable laws and regulations._\n',
				type: 'registry:example',
				target: './app/(terms)/privacy/page.mdx',
			},
			{
				path: './app/(terms)/terms/page.mdx',
				content:
					'import { MOCK_TERMS } from \'../constants\'\n\n**Terms of Service**\n\n_Last Updated: 2024-10-10_\n\n**1. Acceptance of Terms**\n\nBy accessing or using our services, you agree to be bound by these Terms of Service ("Terms"). If you do not agree to all the terms and conditions, then you may not access the service.\n\n**2. Modification of Terms**\n\nWe reserve the right to modify or replace these Terms at any time. It is your responsibility to check this page periodically for changes. Your continued use of the service after any such changes constitutes acceptance of those changes.\n\n**3. Eligibility**\n\nYou must be at least {MOCK_TERMS.minimumAge} years old to use our services. By using the service, you represent and warrant that you meet this eligibility requirement.\n\n**4. User Accounts**\n\n-   **Account Responsibility:** You are responsible for maintaining the confidentiality of your account and password.\n-   **Account Security:** You agree to notify us immediately of any unauthorized use of your account.\n\n**5. Use of the Service**\n\n-   **Prohibited Activities:** You agree not to engage in any activities that violate any applicable laws or regulations.\n-   **User Content:** You retain ownership of any content you submit but grant us a license to use, display, and distribute such content.\n\n**6. Intellectual Property**\n\nAll content and materials on the service are the property of {MOCK_TERMS.appName} or its licensors and are protected by intellectual property laws.\n\n**7. Third-Party Links**\n\nOur service may contain links to third-party websites or services that are not owned or controlled by us. We assume no responsibility for the content or practices of any third-party sites.\n\n**8. Termination**\n\nWe may terminate or suspend your account immediately, without prior notice, for any reason whatsoever, including but not limited to a breach of the Terms.\n\n**9. Limitation of Liability**\n\nIn no event shall {MOCK_TERMS.appName}, nor its directors, employees, partners, agents, suppliers, or affiliates, be liable for any indirect or consequential damages arising out of your use of the service.\n\n**10. Indemnification**\n\nYou agree to defend, indemnify, and hold harmless {MOCK_TERMS.appName} and its affiliates from any claims, damages, or demands arising out of your use of the service.\n\n**11. Governing Law**\n\nThese Terms shall be governed and construed in accordance with the laws of {MOCK_TERMS.jurisdiction}, without regard to its conflict of law provisions.\n\n**12. Dispute Resolution**\n\nAny disputes arising out of these Terms shall be resolved through {MOCK_TERMS.arbitration} in {MOCK_TERMS.jurisdiction}.\n\n**13. Severability**\n\nIf any provision of these Terms is held to be unenforceable, the remaining provisions shall remain in effect.\n\n**14. Entire Agreement**\n\nThese Terms constitute the entire agreement between us regarding our service and supersede any prior agreements.\n\n**15. Contact Us**\n\nIf you have any questions about these Terms, please contact us at {MOCK_TERMS.email}.\n\n---\n\n_Please customize these Terms of Service to suit your specific needs and consult with a legal professional to ensure compliance with all applicable laws and regulations._\n',
				type: 'registry:example',
				target: './app/(terms)/terms/page.mdx',
			},
			{
				path: './app/api/auth/[...nextauth]/route.ts',
				content: "import { handlers } from '@/lib/auth'\nexport const { GET, POST } = handlers\n",
				type: 'registry:example',
				target: './app/api/auth/[...nextauth]/route.ts',
			},
			{
				path: './app/api/webhooks/route.ts',
				content:
					"import {\n\tdeletePriceRecord,\n\tdeleteProductRecord,\n\tmanageSubscriptionStatusChange,\n\tupsertPriceRecord,\n\tupsertProductRecord,\n} from '@/actions/stripe'\nimport { env } from '@/lib/env'\nimport { stripe } from '@/lib/stripe/utils'\nimport Stripe from 'stripe'\n\nconst relevantEvents = new Set([\n\t'product.created',\n\t'product.updated',\n\t'product.deleted',\n\t'price.created',\n\t'price.updated',\n\t'price.deleted',\n\t'checkout.session.completed',\n\t'customer.subscription.created',\n\t'customer.subscription.updated',\n\t'customer.subscription.deleted',\n])\n\nexport async function POST(req: Request) {\n\tconst body = await req.text()\n\tconst sig = req.headers.get('stripe-signature') as string\n\tconst webhookSecret = env.STRIPE_WEBHOOK_SECRET\n\tlet event: Stripe.Event\n\n\ttry {\n\t\tif (!sig || !webhookSecret) return new Response('Webhook secret not found.', { status: 400 })\n\t\tevent = stripe.webhooks.constructEvent(body, sig, webhookSecret)\n\t\tconsole.log(`🔔  Webhook received: ${event.type}`)\n\t} catch (err: unknown) {\n\t\tconsole.log(`❌ Error message: ${err instanceof Error ? err.message : 'Unknown error'}`)\n\t\treturn new Response(`Webhook Error: ${err instanceof Error ? err.message : 'Unknown error'}`, { status: 400 })\n\t}\n\n\tif (relevantEvents.has(event.type)) {\n\t\ttry {\n\t\t\tswitch (event.type) {\n\t\t\t\tcase 'product.created':\n\t\t\t\tcase 'product.updated':\n\t\t\t\t\tawait upsertProductRecord(event.data.object as Stripe.Product)\n\t\t\t\t\tbreak\n\t\t\t\tcase 'price.created':\n\t\t\t\tcase 'price.updated':\n\t\t\t\t\tawait upsertPriceRecord(event.data.object as Stripe.Price)\n\t\t\t\t\tbreak\n\t\t\t\tcase 'price.deleted':\n\t\t\t\t\tawait deletePriceRecord(event.data.object as Stripe.Price)\n\t\t\t\t\tbreak\n\t\t\t\tcase 'product.deleted':\n\t\t\t\t\tawait deleteProductRecord(event.data.object as Stripe.Product)\n\t\t\t\t\tbreak\n\t\t\t\tcase 'customer.subscription.created':\n\t\t\t\tcase 'customer.subscription.updated':\n\t\t\t\tcase 'customer.subscription.deleted':\n\t\t\t\t\tconst subscription = event.data.object as Stripe.Subscription\n\t\t\t\t\tawait manageSubscriptionStatusChange(\n\t\t\t\t\t\tsubscription.id,\n\t\t\t\t\t\tsubscription.customer as string,\n\t\t\t\t\t\tevent.type === 'customer.subscription.created'\n\t\t\t\t\t)\n\t\t\t\t\tbreak\n\t\t\t\tcase 'checkout.session.completed':\n\t\t\t\t\tconst checkoutSession = event.data.object as Stripe.Checkout.Session\n\t\t\t\t\tif (checkoutSession.mode === 'subscription') {\n\t\t\t\t\t\tconst subscriptionId = checkoutSession.subscription\n\t\t\t\t\t\tawait manageSubscriptionStatusChange(subscriptionId as string, checkoutSession.customer as string, true)\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('Unhandled relevant event!')\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error)\n\t\t\treturn new Response('Webhook handler failed. View your Next.js function logs.', {\n\t\t\t\tstatus: 400,\n\t\t\t})\n\t\t}\n\t} else {\n\t\treturn new Response(`Unsupported event type: ${event.type}`, {\n\t\t\tstatus: 400,\n\t\t})\n\t}\n\treturn new Response(JSON.stringify({ received: true }))\n}\n",
				type: 'registry:example',
				target: './app/api/webhooks/route.ts',
			},
			{
				path: './app/layout.tsx',
				content:
					"import { GlobalToaster } from '@/components/global-toaster'\nimport '@/lib/env'\nimport type { Metadata } from 'next'\nimport localFont from 'next/font/local'\nimport { Suspense } from 'react'\nimport './globals.css'\n\nconst geistSans = localFont({\n\tsrc: './fonts/GeistVF.woff',\n\tvariable: '--font-geist-sans',\n\tweight: '100 900',\n})\nconst geistMono = localFont({\n\tsrc: './fonts/GeistMonoVF.woff',\n\tvariable: '--font-geist-mono',\n\tweight: '100 900',\n})\n\nexport const metadata: Metadata = {\n\ttitle: 'Create Next App',\n\tdescription: 'Generated by create next app',\n}\n\nexport default function RootLayout({\n\tchildren,\n}: Readonly<{\n\tchildren: React.ReactNode\n}>) {\n\treturn (\n\t\t<html lang='en'>\n\t\t\t<body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>\n\t\t\t\t{children}\n\t\t\t\t<Suspense>\n\t\t\t\t\t<GlobalToaster />\n\t\t\t\t</Suspense>\n\t\t\t</body>\n\t\t</html>\n\t)\n}\n",
				type: 'registry:example',
				target: './app/layout.tsx',
			},
			{
				path: './components/action-button.tsx',
				content:
					"'use client'\n\nimport { Loader2Icon } from 'lucide-react'\nimport { useFormStatus } from 'react-dom'\nimport { cn } from '../lib/utils'\nimport { Button, ButtonProps } from './ui/button'\n\nexport function ActionButton({ children, className, disabled, loading, ...props }: ButtonProps & { loading?: boolean }) {\n\tconst { pending } = useFormStatus()\n\n\treturn (\n\t\t<Button className={cn('relative', className)} disabled={disabled || loading || pending} type='submit' {...props}>\n\t\t\t<span className={cn('flex items-center', { invisible: loading || pending })}>{children}</span>\n\t\t\t{(loading || pending) && (\n\t\t\t\t<div className='absolute m-auto'>\n\t\t\t\t\t<Loader2Icon className='size-5 animate-spin' />\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</Button>\n\t)\n}\n",
				type: 'registry:block',
			},
			{
				path: './components/form-error.tsx',
				content:
					"'use client'\n\nimport { useEffect } from 'react'\nimport toast from 'react-hot-toast'\n\nexport function FormError({ hidden = false, value }: { hidden?: boolean; value: string[] | undefined }) {\n\tuseEffect(() => {\n\t\tif (!hidden) return\n\t\tif (value?.length && value.length > 0) toast.error(`FATAL: ${value[0]}`)\n\t}, [hidden, value])\n\n\tif (hidden || !value || !value.length) return null\n\treturn <div className='text-sm text-destructive'>{value[0]}</div>\n}\n",
				type: 'registry:block',
			},
			{
				path: './components/form-input.tsx',
				content:
					"import { cn } from '@/lib/utils'\nimport { FormError } from './form-error'\nimport { Input, InputProps } from './ui/input'\nimport { Label } from './ui/label'\n\ntype FormInputProps = InputProps & { error?: string[]; label?: string }\n\nexport function FormInput({ className, error, id, label, name, ...props }: FormInputProps) {\n\treturn (\n\t\t<div className={cn('grid gap-2 h-fit', className)}>\n\t\t\t{label && <Label htmlFor={id ?? name}>{label}</Label>}\n\t\t\t<Input id={id ?? name} name={name ?? id} {...props} />\n\t\t\t<FormError value={error} />\n\t\t</div>\n\t)\n}\n",
				type: 'registry:block',
			},
			{
				path: './components/global-toaster.tsx',
				content:
					"'use client'\n\nimport { usePathname, useRouter, useSearchParams } from 'next/navigation'\nimport { useEffect } from 'react'\nimport toast, { Toaster } from 'react-hot-toast'\n\nexport function GlobalToaster() {\n\tconst pathname = usePathname()\n\tconst router = useRouter()\n\tconst searchParams = useSearchParams()\n\n\tuseEffect(() => {\n\t\tconst message = searchParams.get('message')\n\t\tconst error = searchParams.get('error')\n\t\tconst success = searchParams.get('success')\n\n\t\tif (!message && !error && !success) return\n\t\tconst toastType = message ? toast : success ? toast.success : toast.error\n\t\ttoastType(message ? message : success ? success : error)\n\n\t\tconst newSearchParams = new URLSearchParams(searchParams.toString())\n\t\tconst paramsToRemove = ['message', 'error', 'success']\n\t\tparamsToRemove.forEach((param) => newSearchParams.delete(param))\n\t\tconst redirectPath = `${pathname}?${newSearchParams.toString()}`\n\t\trouter.replace(redirectPath, { scroll: false })\n\t}, [searchParams])\n\n\treturn <Toaster />\n}\n",
				type: 'registry:block',
			},
			{
				path: './components/ui/sidebar.tsx',
				content:
					'"use client"\n\nimport * as React from "react"\nimport { Slot } from "@radix-ui/react-slot"\nimport { VariantProps, cva } from "class-variance-authority"\nimport { PanelLeft } from "lucide-react"\n\nimport { useIsMobile } from "@/hooks/use-mobile"\nimport { cn } from "@/lib/utils"\nimport { Button } from "@/components/ui/button"\nimport { Input } from "@/components/ui/input"\nimport { Separator } from "@/components/ui/separator"\nimport { Sheet, SheetContent } from "@/components/ui/sheet"\nimport { Skeleton } from "@/components/ui/skeleton"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from "@/components/ui/tooltip"\n\nconst SIDEBAR_COOKIE_NAME = "sidebar:state"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = "16rem"\nconst SIDEBAR_WIDTH_MOBILE = "18rem"\nconst SIDEBAR_WIDTH_ICON = "3rem"\nconst SIDEBAR_KEYBOARD_SHORTCUT = "b"\n\ntype SidebarContext = {\n  state: "expanded" | "collapsed"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error("useSidebar must be used within a SidebarProvider.")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<"div"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        if (setOpenProp) {\n          return setOpenProp?.(\n            typeof value === "function" ? value(open) : value\n          )\n        }\n\n        _setOpen(value)\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${open}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener("keydown", handleKeyDown)\n      return () => window.removeEventListener("keydown", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state="expanded" or "collapsed".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? "expanded" : "collapsed"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                "--sidebar-width": SIDEBAR_WIDTH,\n                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = "SidebarProvider"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<"div"> & {\n    side?: "left" | "right"\n    variant?: "sidebar" | "floating" | "inset"\n    collapsible?: "offcanvas" | "icon" | "none"\n  }\n>(\n  (\n    {\n      side = "left",\n      variant = "sidebar",\n      collapsible = "offcanvas",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === "none") {\n      return (\n        <div\n          className={cn(\n            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar="sidebar"\n            data-mobile="true"\n            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"\n            style={\n              {\n                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className="flex h-full w-full flex-col">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className="group peer hidden md:block text-sidebar-foreground"\n        data-state={state}\n        data-collapsible={state === "collapsed" ? collapsible : ""}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",\n            "group-data-[collapsible=offcanvas]:w-0",\n            "group-data-[side=right]:rotate-180",\n            variant === "floating" || variant === "inset"\n              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"\n              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"\n          )}\n        />\n        <div\n          className={cn(\n            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",\n            side === "left"\n              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"\n              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",\n            // Adjust the padding for floating and inset variants.\n            variant === "floating" || variant === "inset"\n              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"\n              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar="sidebar"\n            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = "Sidebar"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar="trigger"\n      variant="ghost"\n      size="icon"\n      className={cn("h-7 w-7", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className="sr-only">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = "SidebarTrigger"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<"button">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar="rail"\n      aria-label="Toggle Sidebar"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title="Toggle Sidebar"\n      className={cn(\n        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",\n        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",\n        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",\n        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",\n        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",\n        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = "SidebarRail"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<"main">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        "relative flex min-h-svh flex-1 flex-col bg-background",\n        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = "SidebarInset"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar="input"\n      className={cn(\n        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = "SidebarInput"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<"div">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar="header"\n      className={cn("flex flex-col gap-2 p-2", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = "SidebarHeader"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<"div">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar="footer"\n      className={cn("flex flex-col gap-2 p-2", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = "SidebarFooter"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar="separator"\n      className={cn("mx-2 w-auto bg-sidebar-border", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = "SidebarSeparator"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<"div">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar="content"\n      className={cn(\n        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = "SidebarContent"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<"div">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar="group"\n      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = "SidebarGroup"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<"div"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : "div"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar="group-label"\n      className={cn(\n        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",\n        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = "SidebarGroupLabel"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<"button"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : "button"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar="group-action"\n      className={cn(\n        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",\n        // Increases the hit area of the button on mobile.\n        "after:absolute after:-inset-2 after:md:hidden",\n        "group-data-[collapsible=icon]:hidden",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = "SidebarGroupAction"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<"div">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar="group-content"\n    className={cn("w-full text-sm", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = "SidebarGroupContent"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<"ul">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar="menu"\n    className={cn("flex w-full min-w-0 flex-col gap-1", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = "SidebarMenu"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<"li">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar="menu-item"\n    className={cn("group/menu-item relative", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = "SidebarMenuItem"\n\nconst sidebarMenuButtonVariants = cva(\n  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",\n  {\n    variants: {\n      variant: {\n        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",\n        outline:\n          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",\n      },\n      size: {\n        default: "h-8 text-sm",\n        sm: "h-7 text-xs",\n        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",\n      },\n    },\n    defaultVariants: {\n      variant: "default",\n      size: "default",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<"button"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = "default",\n      size = "default",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : "button"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar="menu-button"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === "string") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side="right"\n          align="center"\n          hidden={state !== "collapsed" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = "SidebarMenuButton"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<"button"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : "button"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar="menu-action"\n      className={cn(\n        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",\n        // Increases the hit area of the button on mobile.\n        "after:absolute after:-inset-2 after:md:hidden",\n        "peer-data-[size=sm]/menu-button:top-1",\n        "peer-data-[size=default]/menu-button:top-1.5",\n        "peer-data-[size=lg]/menu-button:top-2.5",\n        "group-data-[collapsible=icon]:hidden",\n        showOnHover &&\n          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = "SidebarMenuAction"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<"div">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar="menu-badge"\n    className={cn(\n      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",\n      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",\n      "peer-data-[size=sm]/menu-button:top-1",\n      "peer-data-[size=default]/menu-button:top-1.5",\n      "peer-data-[size=lg]/menu-button:top-2.5",\n      "group-data-[collapsible=icon]:hidden",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = "SidebarMenuBadge"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<"div"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar="menu-skeleton"\n      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className="size-4 rounded-md"\n          data-sidebar="menu-skeleton-icon"\n        />\n      )}\n      <Skeleton\n        className="h-4 flex-1 max-w-[--skeleton-width]"\n        data-sidebar="menu-skeleton-text"\n        style={\n          {\n            "--skeleton-width": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<"ul">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar="menu-sub"\n    className={cn(\n      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",\n      "group-data-[collapsible=icon]:hidden",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = "SidebarMenuSub"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<"li">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = "SidebarMenuSubItem"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<"a"> & {\n    asChild?: boolean\n    size?: "sm" | "md"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : "a"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar="menu-sub-button"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",\n        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",\n        size === "sm" && "text-xs",\n        size === "md" && "text-sm",\n        "group-data-[collapsible=icon]:hidden",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = "SidebarMenuSubButton"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n',
				type: 'registry:ui',
			},
			{
				path: './docker-compose.yml',
				content:
					"version: '3.9'\n\nservices:\n    db:\n        image: postgres\n        ports:\n            - '5432:5432'\n        restart: always\n        shm_size: 128mb\n        environment:\n            POSTGRES_USER: postgres\n            POSTGRES_PASSWORD: password\n            POSTGRES_DB: postgres\n",
				type: 'registry:example',
				target: '~/docker-compose.yml',
			},
			{
				path: './hooks/use-mobile.tsx',
				content:
					'import * as React from "react"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener("change", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener("change", onChange)\n  }, [])\n\n  return !!isMobile\n}\n',
				type: 'registry:hook',
			},
			{
				path: './lib/auth.ts',
				content:
					"import { loginSchema } from '@/validators/auth'\nimport { PrismaAdapter } from '@auth/prisma-adapter'\nimport bcrypt from 'bcryptjs'\nimport NextAuth, { NextAuthConfig } from 'next-auth'\nimport Credentials from 'next-auth/providers/credentials'\nimport Github from 'next-auth/providers/github'\nimport Google from 'next-auth/providers/google'\nimport Resend from 'next-auth/providers/resend'\nimport prisma from './db'\nimport { env } from './env'\nimport { AuthUser } from './utils'\n\nexport const authConfig = {\n\tadapter: PrismaAdapter(prisma),\n\tcallbacks: {\n\t\tauthorized: ({ auth, request: { nextUrl } }) => {\n\t\t\t// TODO: If you don't want to allow access to the root route, remove it from the allowedRoutes array\n\t\t\tconst allowedRoutes = ['/', '/forgot', '/login', '/register', '/privacy', '/terms']\n\n\t\t\tconst isAuthed = !!auth?.user\n\t\t\tconst isAuthRoute = allowedRoutes.some((route) => nextUrl.pathname === route)\n\n\t\t\tif (!isAuthRoute) {\n\t\t\t\tif (isAuthed) return true\n\t\t\t\treturn false\n\t\t\t\t// TODO: Update page to redirect to after authentication\n\t\t\t} else if (isAuthed) return Response.redirect(new URL('/dashboard', nextUrl))\n\t\t\treturn true\n\t\t},\n\t},\n\tpages: { signIn: '/login' },\n\tproviders: [\n\t\tCredentials({\n\t\t\tcredentials: { email: {}, password: {} },\n\t\t\tauthorize: async (credentials) => {\n\t\t\t\tconst { email, password } = await loginSchema.parseAsync(credentials)\n\t\t\t\tconst user = await prisma.user.findUnique({ where: { email } })\n\n\t\t\t\tif (!user) throw new Error('User not found')\n\t\t\t\telse if (!user.passwordHash) throw new Error('User does not have a password')\n\t\t\t\telse if (!(await bcrypt.compare(password, user.passwordHash))) throw new Error('Password does not match')\n\n\t\t\t\treturn user\n\t\t\t},\n\t\t}),\n\t\tGithub({ allowDangerousEmailAccountLinking: true }),\n\t\tGoogle({ allowDangerousEmailAccountLinking: true }),\n\t\tResend({ from: env.AUTH_RESEND_EMAIL }),\n\t],\n\tsession: { strategy: 'jwt' },\n} satisfies NextAuthConfig\n\nexport const { handlers, auth: session, signIn, signOut } = NextAuth(authConfig)\n\nexport const auth = async (): Promise<AuthUser> => {\n\tconst session = await NextAuth(authConfig).auth()\n\tif (!session?.user) throw new Error('Not authenticated.')\n\n\tconst user = await prisma.user.findFirst({\n\t\twhere: { email: session.user.email ?? '' },\n\t\tinclude: { subscriptions: { where: { status: 'active' }, include: { price: { include: { product: true } } } } },\n\t})\n\tif (!user) throw new Error('User not found')\n\n\treturn user\n}\n",
				type: 'registry:lib',
			},
			{
				path: './lib/constants.ts',
				content:
					"import { CommandIcon } from 'lucide-react'\n\n// TODO: Real app name and icon\nexport const MOCK_APP_ICON = CommandIcon\nexport const MOCK_APP_NAME = 'Acme Inc'\nexport const MOCK_APP_DESC = 'A starter template for Next.js'\n\n// TODO: Real testimonial\nexport const MOCK_TESTIMONIAL = {\n\tname: 'Sofia Davis',\n\tquote: 'This library has saved me countless hours of work and helped me deliver stunning designs to my clients faster than ever before.',\n}\n\nexport const PLACEHOLDER_IMAGE = 'https://ui.shadcn.com/placeholder.svg'\n",
				type: 'registry:lib',
			},
			{
				path: './lib/db.ts',
				content:
					"import { PrismaClient } from '@prisma/client'\n\nconst prismaClientSingleton = () => {\n\treturn new PrismaClient()\n}\n\ndeclare const globalThis: {\n\tprismaGlobal: ReturnType<typeof prismaClientSingleton>\n} & typeof global\n\nconst prisma = globalThis.prismaGlobal ?? prismaClientSingleton()\n\nexport default prisma\n\nif (process.env.NODE_ENV !== 'production') globalThis.prismaGlobal = prisma\n",
				type: 'registry:lib',
			},
			{
				path: './lib/env.ts',
				content:
					"import { createEnv } from '@t3-oss/env-nextjs'\nimport { z } from 'zod'\n\nexport const env = createEnv({\n\tserver: {\n\t\tAUTH_SECRET: z.string().min(1),\n\n\t\tAUTH_GITHUB_ID: z.string().min(1),\n\t\tAUTH_GITHUB_SECRET: z.string().min(1),\n\n\t\tAUTH_GOOGLE_ID: z.string().min(1),\n\t\tAUTH_GOOGLE_SECRET: z.string().min(1),\n\n\t\tAUTH_RESEND_KEY: z.string().min(1),\n\t\tAUTH_RESEND_EMAIL: z.string().email(),\n\n\t\tDATABASE_URL: z.string().url(),\n\n\t\tSTRIPE_SECRET_KEY: z.string().min(1),\n\t\tSTRIPE_WEBHOOK_SECRET: z.string().min(1),\n\t},\n\tclient: {\n\t\tNEXT_PUBLIC_SITE_URL: z.string().url(),\n\t\tNEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: z.string().min(1),\n\t},\n\truntimeEnv: {\n\t\tAUTH_SECRET: process.env.AUTH_SECRET,\n\n\t\tAUTH_GITHUB_ID: process.env.AUTH_GITHUB_ID,\n\t\tAUTH_GITHUB_SECRET: process.env.AUTH_GITHUB_SECRET,\n\n\t\tAUTH_GOOGLE_ID: process.env.AUTH_GOOGLE_ID,\n\t\tAUTH_GOOGLE_SECRET: process.env.AUTH_GOOGLE_SECRET,\n\n\t\tAUTH_RESEND_KEY: process.env.AUTH_RESEND_KEY,\n\t\tAUTH_RESEND_EMAIL: process.env.AUTH_RESEND_EMAIL,\n\n\t\tDATABASE_URL: process.env.DATABASE_URL,\n\n\t\tSTRIPE_SECRET_KEY: process.env.STRIPE_SECRET_KEY,\n\t\tSTRIPE_WEBHOOK_SECRET: process.env.STRIPE_WEBHOOK_SECRET,\n\n\t\tNEXT_PUBLIC_SITE_URL: process.env.NEXT_PUBLIC_SITE_URL,\n\t\tNEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY,\n\t},\n})\n",
				type: 'registry:lib',
			},
			{
				path: './lib/stripe/client.ts',
				content:
					"import { loadStripe, Stripe } from '@stripe/stripe-js'\nimport { env } from '../env'\n\nlet stripePromise: Promise<Stripe | null>\n\nexport const getStripe = () => {\n\tif (!stripePromise) stripePromise = loadStripe(env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY)\n\treturn stripePromise\n}\n",
				type: 'registry:lib',
			},
			{
				path: './lib/stripe/utils.ts',
				content:
					"import Stripe from 'stripe'\nimport { env } from '../env'\n\nexport const stripe = new Stripe(env.STRIPE_SECRET_KEY, { apiVersion: '2024-09-30.acacia' })\n\nexport const calculateTrialEndUnixTimestamp = (trialPeriodDays: number | null | undefined) => {\n\t// Check if trialPeriodDays is null, undefined, or less than 2 days\n\tif (trialPeriodDays === null || trialPeriodDays === undefined || trialPeriodDays < 2) {\n\t\treturn undefined\n\t}\n\n\tconst currentDate = new Date() // Current date and time\n\tconst trialEnd = new Date(currentDate.getTime() + (trialPeriodDays + 1) * 24 * 60 * 60 * 1000) // Add trial days\n\treturn Math.floor(trialEnd.getTime() / 1000) // Convert to Unix timestamp in seconds\n}\n\nexport const toDateTime = (secs: number) => {\n\tconst t = new Date(+0)\n\tt.setSeconds(secs)\n\treturn t\n}\n",
				type: 'registry:lib',
			},
			{
				path: './lib/utils.ts',
				content:
					"import { Prisma } from '@prisma/client'\nimport { clsx, type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport type AuthUser = Prisma.UserGetPayload<{ include: { subscriptions: { include: { price: { include: { product: true } } } } } }>\n\nexport function cn(...inputs: ClassValue[]) {\n\treturn twMerge(clsx(inputs))\n}\n",
				type: 'registry:lib',
			},
			{
				path: './mdx-components.tsx',
				content:
					"import type { MDXComponents } from 'mdx/types'\n\nexport function useMDXComponents(components: MDXComponents): MDXComponents {\n\treturn {\n\t\t...components,\n\t}\n}\n",
				type: 'registry:example',
				target: '~/mdx-components.tsx',
			},
			{
				path: './middleware.ts',
				content:
					"import NextAuth from 'next-auth'\nimport { authConfig } from './lib/auth'\n\nexport default NextAuth(authConfig).auth\nexport const config = {\n\tmatcher: ['/((?!api|_next/static|_next/image|.*\\\\.png$).*)'],\n}\n",
				type: 'registry:example',
				target: '~/middleware.ts',
			},
			{
				path: './next.config.mjs',
				content:
					"import createMDX from '@next/mdx'\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n\timages: {\n\t\tremotePatterns: [\n\t\t\t{\n\t\t\t\thostname: 'avatars.githubusercontent.com',\n\t\t\t},\n\t\t\t{\n\t\t\t\thostname: 'lh3.googleusercontent.com',\n\t\t\t},\n\t\t],\n\t},\n\tpageExtensions: ['js', 'jsx', 'md', 'mdx', 'ts', 'tsx'],\n}\n\nconst withMDX = createMDX({})\nexport default withMDX(nextConfig)\n",
				type: 'registry:example',
				target: '~/next.config.mjs',
			},
			{
				path: './prisma/migrations/20241028144948_add_auth/migration.sql',
				content:
					'-- CreateTable\nCREATE TABLE "User" (\n    "id" TEXT NOT NULL,\n    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    "updatedAt" TIMESTAMP(3) NOT NULL,\n    "name" TEXT,\n    "email" TEXT NOT NULL,\n    "image" TEXT,\n    "emailVerified" TIMESTAMP(3),\n    "passwordHash" TEXT,\n\n    CONSTRAINT "User_pkey" PRIMARY KEY ("id")\n);\n\n-- CreateTable\nCREATE TABLE "Account" (\n    "userId" TEXT NOT NULL,\n    "type" TEXT NOT NULL,\n    "provider" TEXT NOT NULL,\n    "providerAccountId" TEXT NOT NULL,\n    "refresh_token" TEXT,\n    "access_token" TEXT,\n    "expires_at" INTEGER,\n    "token_type" TEXT,\n    "scope" TEXT,\n    "id_token" TEXT,\n    "session_state" TEXT,\n    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    "updatedAt" TIMESTAMP(3) NOT NULL,\n\n    CONSTRAINT "Account_pkey" PRIMARY KEY ("provider","providerAccountId")\n);\n\n-- CreateTable\nCREATE TABLE "Session" (\n    "sessionToken" TEXT NOT NULL,\n    "userId" TEXT NOT NULL,\n    "expires" TIMESTAMP(3) NOT NULL,\n    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    "updatedAt" TIMESTAMP(3) NOT NULL\n);\n\n-- CreateTable\nCREATE TABLE "VerificationToken" (\n    "identifier" TEXT NOT NULL,\n    "token" TEXT NOT NULL,\n    "expires" TIMESTAMP(3) NOT NULL,\n\n    CONSTRAINT "VerificationToken_pkey" PRIMARY KEY ("identifier","token")\n);\n\n-- CreateTable\nCREATE TABLE "Authenticator" (\n    "credentialID" TEXT NOT NULL,\n    "userId" TEXT NOT NULL,\n    "providerAccountId" TEXT NOT NULL,\n    "credentialPublicKey" TEXT NOT NULL,\n    "counter" INTEGER NOT NULL,\n    "credentialDeviceType" TEXT NOT NULL,\n    "credentialBackedUp" BOOLEAN NOT NULL,\n    "transports" TEXT,\n\n    CONSTRAINT "Authenticator_pkey" PRIMARY KEY ("userId","credentialID")\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX "User_email_key" ON "User"("email");\n\n-- CreateIndex\nCREATE UNIQUE INDEX "Session_sessionToken_key" ON "Session"("sessionToken");\n\n-- CreateIndex\nCREATE UNIQUE INDEX "Authenticator_credentialID_key" ON "Authenticator"("credentialID");\n\n-- AddForeignKey\nALTER TABLE "Account" ADD CONSTRAINT "Account_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE "Session" ADD CONSTRAINT "Session_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE "Authenticator" ADD CONSTRAINT "Authenticator_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;\n',
				type: 'registry:example',
				target: '~/prisma/migrations/20241028144948_add_auth/migration.sql',
			},
			{
				path: './prisma/migrations/20241028214840_add_stripe/migration.sql',
				content:
					'-- CreateEnum\nCREATE TYPE "PriceInterval" AS ENUM (\'day\', \'week\', \'month\', \'year\');\n\n-- CreateEnum\nCREATE TYPE "PriceType" AS ENUM (\'one_time\', \'recurring\');\n\n-- CreateEnum\nCREATE TYPE "SubscriptionStatus" AS ENUM (\'trialing\', \'active\', \'canceled\', \'incomplete\', \'incomplete_expired\', \'past_due\', \'unpaid\', \'paused\');\n\n-- AlterTable\nALTER TABLE "User" ADD COLUMN     "billingAddress" JSONB,\nADD COLUMN     "paymentMethod" JSONB;\n\n-- CreateTable\nCREATE TABLE "Customer" (\n    "id" TEXT NOT NULL,\n    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    "updatedAt" TIMESTAMP(3) NOT NULL,\n    "stripeCustomerId" TEXT,\n\n    CONSTRAINT "Customer_pkey" PRIMARY KEY ("id")\n);\n\n-- CreateTable\nCREATE TABLE "Price" (\n    "id" TEXT NOT NULL,\n    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    "updatedAt" TIMESTAMP(3) NOT NULL,\n    "productId" TEXT,\n    "active" BOOLEAN,\n    "unitAmount" BIGINT,\n    "currency" TEXT,\n    "type" "PriceType",\n    "interval" "PriceInterval",\n    "intervalCount" INTEGER,\n    "trialPeriodDays" INTEGER,\n\n    CONSTRAINT "Price_pkey" PRIMARY KEY ("id")\n);\n\n-- CreateTable\nCREATE TABLE "Product" (\n    "id" TEXT NOT NULL,\n    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    "updatedAt" TIMESTAMP(3) NOT NULL,\n    "active" BOOLEAN,\n    "name" TEXT,\n    "desc" TEXT,\n    "image" TEXT,\n    "metadata" JSONB,\n    "features" TEXT[] DEFAULT ARRAY[]::TEXT[],\n\n    CONSTRAINT "Product_pkey" PRIMARY KEY ("id")\n);\n\n-- CreateTable\nCREATE TABLE "Subscription" (\n    "id" TEXT NOT NULL,\n    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    "updatedAt" TIMESTAMP(3) NOT NULL,\n    "priceId" TEXT,\n    "userId" TEXT,\n    "status" "SubscriptionStatus",\n    "metadata" JSONB,\n    "quantity" INTEGER,\n    "cancelAtPeriodEnd" BOOLEAN,\n    "created" TIMESTAMP(3) NOT NULL,\n    "currentPeriodStart" TIMESTAMP(3) NOT NULL,\n    "currentPeriodEnd" TIMESTAMP(3) NOT NULL,\n    "endedAt" TIMESTAMP(3),\n    "cancelAt" TIMESTAMP(3),\n    "canceledAt" TIMESTAMP(3),\n    "trialStart" TIMESTAMP(3),\n    "trialEnd" TIMESTAMP(3),\n\n    CONSTRAINT "Subscription_pkey" PRIMARY KEY ("id")\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX "Customer_stripeCustomerId_key" ON "Customer"("stripeCustomerId");\n\n-- AddForeignKey\nALTER TABLE "Customer" ADD CONSTRAINT "Customer_id_fkey" FOREIGN KEY ("id") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE "Price" ADD CONSTRAINT "Price_productId_fkey" FOREIGN KEY ("productId") REFERENCES "Product"("id") ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE "Subscription" ADD CONSTRAINT "Subscription_priceId_fkey" FOREIGN KEY ("priceId") REFERENCES "Price"("id") ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE "Subscription" ADD CONSTRAINT "Subscription_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;\n',
				type: 'registry:example',
				target: '~/prisma/migrations/20241028214840_add_stripe/migration.sql',
			},
			{
				path: './prisma/migrations/migration_lock.toml',
				content:
					'# Please do not edit this file manually\n# It should be added in your version-control system (i.e. Git)\nprovider = "postgresql"',
				type: 'registry:example',
				target: '~/prisma/migrations/migration_lock.toml',
			},
			{
				path: './prisma/schema/auth.prisma',
				content:
					'model User {\n    id        String   @id @default(cuid())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n\n    name  String?\n    email String  @unique\n    image String?\n\n    billingAddress Json?\n    paymentMethod  Json?\n\n    emailVerified DateTime?\n    passwordHash  String?\n\n    customer      Customer?\n    subscriptions Subscription[]\n\n    accounts      Account[]\n    sessions      Session[]\n    // Optional for WebAuthn support\n    Authenticator Authenticator[]\n}\n\nmodel Account {\n    userId            String\n    type              String\n    provider          String\n    providerAccountId String\n    refresh_token     String?\n    access_token      String?\n    expires_at        Int?\n    token_type        String?\n    scope             String?\n    id_token          String?\n    session_state     String?\n    createdAt         DateTime @default(now())\n    updatedAt         DateTime @updatedAt\n    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n    @@id([provider, providerAccountId])\n}\n\nmodel Session {\n    sessionToken String   @unique\n    userId       String\n    expires      DateTime\n    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n    createdAt    DateTime @default(now())\n    updatedAt    DateTime @updatedAt\n}\n\nmodel VerificationToken {\n    identifier String\n    token      String\n    expires    DateTime\n\n    @@id([identifier, token])\n}\n\n// Optional for WebAuthn support\nmodel Authenticator {\n    credentialID         String  @unique\n    userId               String\n    providerAccountId    String\n    credentialPublicKey  String\n    counter              Int\n    credentialDeviceType String\n    credentialBackedUp   Boolean\n    transports           String?\n    user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n    @@id([userId, credentialID])\n}\n',
				type: 'registry:example',
				target: '~/prisma/schema/auth.prisma',
			},
			{
				path: './prisma/schema/schema.prisma',
				content:
					'datasource db {\n  provider = "postgresql"\n  url      = env("DATABASE_URL")\n}\n\ngenerator client {\n  provider        = "prisma-client-js"\n  previewFeatures = ["prismaSchemaFolder"]\n}\n',
				type: 'registry:example',
				target: '~/prisma/schema/schema.prisma',
			},
			{
				path: './prisma/schema/stripe.prisma',
				content:
					'model Customer {\n    id        String   @id\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n\n    stripeCustomerId String? @unique\n\n    user User @relation(fields: [id], references: [id], onDelete: Cascade)\n}\n\nenum PriceInterval {\n    day\n    week\n    month\n    year\n}\n\nenum PriceType {\n    one_time\n    recurring\n}\n\nmodel Price {\n    id        String   @id\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n\n    productId       String?\n    active          Boolean?\n    unitAmount      BigInt?\n    currency        String?\n    type            PriceType?\n    interval        PriceInterval?\n    intervalCount   Int?\n    trialPeriodDays Int?\n\n    product       Product?       @relation(fields: [productId], references: [id], onDelete: Cascade)\n    subscriptions Subscription[]\n}\n\nmodel Product {\n    id        String   @id\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n\n    active   Boolean?\n    name     String?\n    desc     String?\n    image    String?\n    metadata Json?\n    features String[] @default([])\n\n    prices Price[]\n}\n\nenum SubscriptionStatus {\n    trialing\n    active\n    canceled\n    incomplete\n    incomplete_expired\n    past_due\n    unpaid\n    paused\n}\n\nmodel Subscription {\n    id        String   @id\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n\n    priceId            String?\n    userId             String?\n    status             SubscriptionStatus?\n    metadata           Json?\n    quantity           Int?\n    cancelAtPeriodEnd  Boolean?\n    created            DateTime\n    currentPeriodStart DateTime\n    currentPeriodEnd   DateTime\n    endedAt            DateTime?\n    cancelAt           DateTime?\n    canceledAt         DateTime?\n    trialStart         DateTime?\n    trialEnd           DateTime?\n\n    price Price? @relation(fields: [priceId], references: [id], onDelete: Cascade)\n    user  User?  @relation(fields: [userId], references: [id], onDelete: Cascade)\n}\n',
				type: 'registry:example',
				target: '~/prisma/schema/stripe.prisma',
			},
			{
				path: './scripts/seed-stripe.ts',
				content:
					"import { Prisma, PrismaClient } from '@prisma/client'\nimport Stripe from 'stripe'\n\nconst prisma = new PrismaClient()\n\nconst TRIAL_PERIOD_DAYS = 0\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, { apiVersion: '2024-09-30.acacia' })\n\nconst upsertProductRecord = async (product: Stripe.Product) => {\n\tconst productData: Prisma.ProductCreateInput = {\n\t\tid: product.id,\n\t\tactive: product.active,\n\t\tname: product.name,\n\t\tdesc: product.description ?? null,\n\t\timage: product.images?.[0] ?? null,\n\t\tmetadata: product.metadata,\n\t\tfeatures: product.marketing_features.map((feature) => feature.name) as string[],\n\t}\n\n\tawait prisma.product.upsert({ where: { id: product.id }, create: productData, update: productData })\n\tconsole.log(`Product inserted/updated: ${product.id}`)\n}\n\nconst upsertPriceRecord = async (price: Stripe.Price) => {\n\tconst priceData: Prisma.PriceCreateInput = {\n\t\tid: price.id,\n\t\tproduct: { connect: { id: typeof price.product === 'string' ? price.product : '' } },\n\t\tactive: price.active,\n\t\tcurrency: price.currency,\n\t\ttype: price.type,\n\t\tunitAmount: price.unit_amount ?? null,\n\t\tinterval: price.recurring?.interval ?? null,\n\t\tintervalCount: price.recurring?.interval_count ?? null,\n\t\ttrialPeriodDays: price.recurring?.trial_period_days ?? TRIAL_PERIOD_DAYS,\n\t}\n\n\tawait prisma.price.upsert({ where: { id: price.id }, create: priceData, update: priceData })\n\tconsole.log(`Price inserted/updated: ${price.id}`)\n}\n\nasync function retrieveStripeProducts() {\n\tconst products = await stripe.products.list()\n\treturn products.data\n}\n\nasync function retrieveStripePrices() {\n\tconst prices = await stripe.prices.list()\n\treturn prices.data\n}\n\nasync function main() {\n\tconst products = await retrieveStripeProducts()\n\tawait Promise.all(products.map((product) => upsertProductRecord(product)))\n\n\tconst prices = await retrieveStripePrices()\n\tawait Promise.all(prices.map((price) => upsertPriceRecord(price)))\n}\n\nmain()\n\t.then(async () => {\n\t\tawait prisma.$disconnect()\n\t})\n\t.catch(async (e) => {\n\t\tconsole.error(e)\n\t\tawait prisma.$disconnect()\n\t\tprocess.exit(1)\n\t})\n",
				type: 'registry:example',
				target: '~/scripts/seed-stripe.ts',
			},
			{
				path: './tsconfig.json',
				content:
					'{\n\t"compilerOptions": {\n\t\t"lib": ["dom", "dom.iterable", "esnext"],\n\t\t"allowJs": true,\n\t\t"skipLibCheck": true,\n\t\t"strict": true,\n\t\t"noEmit": true,\n\t\t"esModuleInterop": true,\n\t\t"module": "esnext",\n\t\t"moduleResolution": "bundler",\n\t\t"resolveJsonModule": true,\n\t\t"isolatedModules": true,\n\t\t"jsx": "preserve",\n\t\t"incremental": true,\n\t\t"plugins": [\n\t\t\t{\n\t\t\t\t"name": "next"\n\t\t\t}\n\t\t],\n\t\t"paths": {\n\t\t\t"@/*": ["./*"]\n\t\t}\n\t},\n\t"include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],\n\t"exclude": ["node_modules"],\n\t"ts-node": {\n\t\t"require": ["tsconfig-paths/register"],\n\t\t"compilerOptions": {\n\t\t\t"module": "CommonJS"\n\t\t}\n\t}\n}\n',
				type: 'registry:example',
				target: '~/tsconfig.json',
			},
			{
				path: './validators/auth.ts',
				content:
					"import { z } from 'zod'\n\nexport const loginSchema = z.object({\n\temail: z.string({ required_error: 'Email is required' }).min(1, { message: 'Email is required' }).email({ message: 'Invalid email' }),\n\tpassword: z.string({ required_error: 'Password is required' }).min(1, { message: 'Password is required' }),\n})\n\nexport const registerSchema = z\n\t.object({\n\t\tfirstName: z.string({ required_error: 'First name is required' }).min(1, { message: 'First name is required' }),\n\t\tlastName: z.string({ required_error: 'Last name is required' }).min(1, { message: 'Last name is required' }),\n\t\temail: z\n\t\t\t.string({ required_error: 'Email is required' })\n\t\t\t.min(1, { message: 'Email is required' })\n\t\t\t.email({ message: 'Invalid email' }),\n\t\tpassword: z.string({ required_error: 'Password is required' }).min(8, { message: 'Password must be at least 8 characters' }),\n\t\tconfirmPassword: z.string({ required_error: 'Password confirmation is required' }),\n\t})\n\t.refine(({ password, confirmPassword }) => password === confirmPassword, {\n\t\tmessage: 'Passwords do not match',\n\t\tpath: ['confirmPassword'],\n\t})\n\nexport const verifyEmailSchema = z.object({\n\temail: z.string({ required_error: 'Email is required' }).min(1, { message: 'Email is required' }).email({ message: 'Invalid email' }),\n})\n",
				type: 'registry:example',
				target: '~/validators/auth.ts',
			},
			{
				path: './validators/user.ts',
				content:
					"import { z } from 'zod'\n\nexport const updatePasswordSchema = z\n\t.object({\n\t\tpassword: z.string({ required_error: 'Password is required' }).min(8, { message: 'Password must be at least 8 characters' }),\n\t\tconfirmPassword: z.string({ required_error: 'Password confirmation is required' }),\n\t})\n\t.refine(({ password, confirmPassword }) => password === confirmPassword, {\n\t\tmessage: 'Passwords do not match',\n\t\tpath: ['confirmPassword'],\n\t})\n\nexport const updateUserSchema = z.object({\n\tname: z.string({ required_error: 'Name is required' }).min(1, { message: 'Name is required' }),\n})\n",
				type: 'registry:example',
				target: '~/validators/user.ts',
			},
		],
		tailwind: {
			config: {
				theme: {
					extend: {
						colors: {
							sidebar: {
								DEFAULT: 'hsl(var(--sidebar-background))',
								foreground: 'hsl(var(--sidebar-foreground))',
								primary: 'hsl(var(--sidebar-primary))',
								'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
								accent: 'hsl(var(--sidebar-accent))',
								'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
								border: 'hsl(var(--sidebar-border))',
								ring: 'hsl(var(--sidebar-ring))',
							},
						},
					},
				},
				plugins: ['require("@tailwindcss/typography")'],
			},
		},
		cssVars: {
			light: {
				'sidebar-background': '0 0% 98%',
				'sidebar-foreground': '240 5.3% 26.1%',
				'sidebar-primary': '240 5.9% 10%',
				'sidebar-primary-foreground': '0 0% 98%',
				'sidebar-accent': '240 4.8% 95.9%',
				'sidebar-accent-foreground': '240 5.9% 10%',
				'sidebar-border': '220 13% 91%',
				'sidebar-ring': '217.2 91.2% 59.8%',
			},
			dark: {
				'sidebar-background': '0 0% 98%',
				'sidebar-foreground': '240 5.3% 26.1%',
				'sidebar-primary': '240 5.9% 10%',
				'sidebar-primary-foreground': '0 0% 98%',
				'sidebar-accent': '240 4.8% 95.9%',
				'sidebar-accent-foreground': '240 5.9% 10%',
				'sidebar-border': '220 13% 91%',
				'sidebar-ring': '217.2 91.2% 59.8%',
			},
		},
		meta: {},
	})
